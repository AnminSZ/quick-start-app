// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gen_echosrv.proto

#ifndef PROTOBUF_gen_5fechosrv_2eproto__INCLUDED
#define PROTOBUF_gen_5fechosrv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test_srv {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gen_5fechosrv_2eproto();
void protobuf_AssignDesc_gen_5fechosrv_2eproto();
void protobuf_ShutdownFile_gen_5fechosrv_2eproto();

class echo_request;
class echo_response;

// ===================================================================

class echo_request : public ::google::protobuf::Message {
 public:
  echo_request();
  virtual ~echo_request();

  echo_request(const echo_request& from);

  inline echo_request& operator=(const echo_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const echo_request& default_instance();

  void Swap(echo_request* other);

  // implements Message ----------------------------------------------

  echo_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const echo_request& from);
  void MergeFrom(const echo_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string field1 = 8 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 8;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field9 = 9 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field9() const;
  inline void clear_field9();
  static const int kField9FieldNumber = 9;
  inline const ::std::string& field9() const;
  inline void set_field9(const ::std::string& value);
  inline void set_field9(const char* value);
  inline void set_field9(const char* value, size_t size);
  inline ::std::string* mutable_field9();
  inline ::std::string* release_field9();
  inline void set_allocated_field9(::std::string* field9);

  // optional string field18 = 18 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field18() const;
  inline void clear_field18();
  static const int kField18FieldNumber = 18;
  inline const ::std::string& field18() const;
  inline void set_field18(const ::std::string& value);
  inline void set_field18(const char* value);
  inline void set_field18(const char* value, size_t size);
  inline ::std::string* mutable_field18();
  inline ::std::string* release_field18();
  inline void set_allocated_field18(::std::string* field18);

  // optional bool field80 = 80 [default = false];
  inline bool has_field80() const;
  inline void clear_field80();
  static const int kField80FieldNumber = 80;
  inline bool field80() const;
  inline void set_field80(bool value);

  // optional bool field81 = 81 [default = true];
  inline bool has_field81() const;
  inline void clear_field81();
  static const int kField81FieldNumber = 81;
  inline bool field81() const;
  inline void set_field81(bool value);

  // optional int32 field2 = 2 [default = 1200003];
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline ::google::protobuf::int32 field2() const;
  inline void set_field2(::google::protobuf::int32 value);

  // optional int32 field3 = 3 [default = 1200003];
  inline bool has_field3() const;
  inline void clear_field3();
  static const int kField3FieldNumber = 3;
  inline ::google::protobuf::int32 field3() const;
  inline void set_field3(::google::protobuf::int32 value);

  // optional int32 field280 = 280 [default = 1200003];
  inline bool has_field280() const;
  inline void clear_field280();
  static const int kField280FieldNumber = 280;
  inline ::google::protobuf::int32 field280() const;
  inline void set_field280(::google::protobuf::int32 value);

  // optional int32 field6 = 6 [default = 1200003];
  inline bool has_field6() const;
  inline void clear_field6();
  static const int kField6FieldNumber = 6;
  inline ::google::protobuf::int32 field6() const;
  inline void set_field6(::google::protobuf::int32 value);

  // optional int64 field22 = 22;
  inline bool has_field22() const;
  inline void clear_field22();
  static const int kField22FieldNumber = 22;
  inline ::google::protobuf::int64 field22() const;
  inline void set_field22(::google::protobuf::int64 value);

  // optional string field4 = 4 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field4() const;
  inline void clear_field4();
  static const int kField4FieldNumber = 4;
  inline const ::std::string& field4() const;
  inline void set_field4(const ::std::string& value);
  inline void set_field4(const char* value);
  inline void set_field4(const char* value, size_t size);
  inline ::std::string* mutable_field4();
  inline ::std::string* release_field4();
  inline void set_allocated_field4(::std::string* field4);

  // repeated fixed64 field5 = 5;
  inline int field5_size() const;
  inline void clear_field5();
  static const int kField5FieldNumber = 5;
  inline ::google::protobuf::uint64 field5(int index) const;
  inline void set_field5(int index, ::google::protobuf::uint64 value);
  inline void add_field5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      field5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_field5();

  // optional bool field59 = 59 [default = false];
  inline bool has_field59() const;
  inline void clear_field59();
  static const int kField59FieldNumber = 59;
  inline bool field59() const;
  inline void set_field59(bool value);

  // optional string field7 = 7 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field7() const;
  inline void clear_field7();
  static const int kField7FieldNumber = 7;
  inline const ::std::string& field7() const;
  inline void set_field7(const ::std::string& value);
  inline void set_field7(const char* value);
  inline void set_field7(const char* value, size_t size);
  inline ::std::string* mutable_field7();
  inline ::std::string* release_field7();
  inline void set_allocated_field7(::std::string* field7);

  // optional int32 field16 = 16 [default = 1200003];
  inline bool has_field16() const;
  inline void clear_field16();
  static const int kField16FieldNumber = 16;
  inline ::google::protobuf::int32 field16() const;
  inline void set_field16(::google::protobuf::int32 value);

  // optional int32 field130 = 130 [default = 1200003];
  inline bool has_field130() const;
  inline void clear_field130();
  static const int kField130FieldNumber = 130;
  inline ::google::protobuf::int32 field130() const;
  inline void set_field130(::google::protobuf::int32 value);

  // optional bool field12 = 12 [default = true];
  inline bool has_field12() const;
  inline void clear_field12();
  static const int kField12FieldNumber = 12;
  inline bool field12() const;
  inline void set_field12(bool value);

  // optional bool field17 = 17 [default = true];
  inline bool has_field17() const;
  inline void clear_field17();
  static const int kField17FieldNumber = 17;
  inline bool field17() const;
  inline void set_field17(bool value);

  // optional bool field13 = 13 [default = true];
  inline bool has_field13() const;
  inline void clear_field13();
  static const int kField13FieldNumber = 13;
  inline bool field13() const;
  inline void set_field13(bool value);

  // optional bool field14 = 14 [default = true];
  inline bool has_field14() const;
  inline void clear_field14();
  static const int kField14FieldNumber = 14;
  inline bool field14() const;
  inline void set_field14(bool value);

  // optional int32 field104 = 104 [default = 1200003];
  inline bool has_field104() const;
  inline void clear_field104();
  static const int kField104FieldNumber = 104;
  inline ::google::protobuf::int32 field104() const;
  inline void set_field104(::google::protobuf::int32 value);

  // optional int32 field100 = 100 [default = 1200003];
  inline bool has_field100() const;
  inline void clear_field100();
  static const int kField100FieldNumber = 100;
  inline ::google::protobuf::int32 field100() const;
  inline void set_field100(::google::protobuf::int32 value);

  // optional int32 field101 = 101 [default = 1200003];
  inline bool has_field101() const;
  inline void clear_field101();
  static const int kField101FieldNumber = 101;
  inline ::google::protobuf::int32 field101() const;
  inline void set_field101(::google::protobuf::int32 value);

  // optional string field102 = 102 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field102() const;
  inline void clear_field102();
  static const int kField102FieldNumber = 102;
  inline const ::std::string& field102() const;
  inline void set_field102(const ::std::string& value);
  inline void set_field102(const char* value);
  inline void set_field102(const char* value, size_t size);
  inline ::std::string* mutable_field102();
  inline ::std::string* release_field102();
  inline void set_allocated_field102(::std::string* field102);

  // optional string field103 = 103 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field103() const;
  inline void clear_field103();
  static const int kField103FieldNumber = 103;
  inline const ::std::string& field103() const;
  inline void set_field103(const ::std::string& value);
  inline void set_field103(const char* value);
  inline void set_field103(const char* value, size_t size);
  inline ::std::string* mutable_field103();
  inline ::std::string* release_field103();
  inline void set_allocated_field103(::std::string* field103);

  // optional int32 field29 = 29 [default = 1200003];
  inline bool has_field29() const;
  inline void clear_field29();
  static const int kField29FieldNumber = 29;
  inline ::google::protobuf::int32 field29() const;
  inline void set_field29(::google::protobuf::int32 value);

  // optional bool field30 = 30 [default = false];
  inline bool has_field30() const;
  inline void clear_field30();
  static const int kField30FieldNumber = 30;
  inline bool field30() const;
  inline void set_field30(bool value);

  // optional int32 field60 = 60 [default = 1200003];
  inline bool has_field60() const;
  inline void clear_field60();
  static const int kField60FieldNumber = 60;
  inline ::google::protobuf::int32 field60() const;
  inline void set_field60(::google::protobuf::int32 value);

  // optional int32 field271 = 271 [default = 1200003];
  inline bool has_field271() const;
  inline void clear_field271();
  static const int kField271FieldNumber = 271;
  inline ::google::protobuf::int32 field271() const;
  inline void set_field271(::google::protobuf::int32 value);

  // optional int32 field272 = 272 [default = 1200003];
  inline bool has_field272() const;
  inline void clear_field272();
  static const int kField272FieldNumber = 272;
  inline ::google::protobuf::int32 field272() const;
  inline void set_field272(::google::protobuf::int32 value);

  // optional int32 field150 = 150 [default = 1200003];
  inline bool has_field150() const;
  inline void clear_field150();
  static const int kField150FieldNumber = 150;
  inline ::google::protobuf::int32 field150() const;
  inline void set_field150(::google::protobuf::int32 value);

  // optional int32 field23 = 23 [default = 1200003];
  inline bool has_field23() const;
  inline void clear_field23();
  static const int kField23FieldNumber = 23;
  inline ::google::protobuf::int32 field23() const;
  inline void set_field23(::google::protobuf::int32 value);

  // optional bool field24 = 24 [default = true];
  inline bool has_field24() const;
  inline void clear_field24();
  static const int kField24FieldNumber = 24;
  inline bool field24() const;
  inline void set_field24(bool value);

  // optional int32 field25 = 25 [default = 1200003];
  inline bool has_field25() const;
  inline void clear_field25();
  static const int kField25FieldNumber = 25;
  inline ::google::protobuf::int32 field25() const;
  inline void set_field25(::google::protobuf::int32 value);

  // optional bool field78 = 78;
  inline bool has_field78() const;
  inline void clear_field78();
  static const int kField78FieldNumber = 78;
  inline bool field78() const;
  inline void set_field78(bool value);

  // optional int32 field67 = 67 [default = 1200003];
  inline bool has_field67() const;
  inline void clear_field67();
  static const int kField67FieldNumber = 67;
  inline ::google::protobuf::int32 field67() const;
  inline void set_field67(::google::protobuf::int32 value);

  // optional int32 field68 = 68 [default = 1200003];
  inline bool has_field68() const;
  inline void clear_field68();
  static const int kField68FieldNumber = 68;
  inline ::google::protobuf::int32 field68() const;
  inline void set_field68(::google::protobuf::int32 value);

  // optional int32 field128 = 128 [default = 1200003];
  inline bool has_field128() const;
  inline void clear_field128();
  static const int kField128FieldNumber = 128;
  inline ::google::protobuf::int32 field128() const;
  inline void set_field128(::google::protobuf::int32 value);

  // optional string field129 = 129 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field129() const;
  inline void clear_field129();
  static const int kField129FieldNumber = 129;
  inline const ::std::string& field129() const;
  inline void set_field129(const ::std::string& value);
  inline void set_field129(const char* value);
  inline void set_field129(const char* value, size_t size);
  inline ::std::string* mutable_field129();
  inline ::std::string* release_field129();
  inline void set_allocated_field129(::std::string* field129);

  // optional int32 field131 = 131 [default = 1200003];
  inline bool has_field131() const;
  inline void clear_field131();
  static const int kField131FieldNumber = 131;
  inline ::google::protobuf::int32 field131() const;
  inline void set_field131(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test_srv.echo_request)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field9();
  inline void clear_has_field9();
  inline void set_has_field18();
  inline void clear_has_field18();
  inline void set_has_field80();
  inline void clear_has_field80();
  inline void set_has_field81();
  inline void clear_has_field81();
  inline void set_has_field2();
  inline void clear_has_field2();
  inline void set_has_field3();
  inline void clear_has_field3();
  inline void set_has_field280();
  inline void clear_has_field280();
  inline void set_has_field6();
  inline void clear_has_field6();
  inline void set_has_field22();
  inline void clear_has_field22();
  inline void set_has_field4();
  inline void clear_has_field4();
  inline void set_has_field59();
  inline void clear_has_field59();
  inline void set_has_field7();
  inline void clear_has_field7();
  inline void set_has_field16();
  inline void clear_has_field16();
  inline void set_has_field130();
  inline void clear_has_field130();
  inline void set_has_field12();
  inline void clear_has_field12();
  inline void set_has_field17();
  inline void clear_has_field17();
  inline void set_has_field13();
  inline void clear_has_field13();
  inline void set_has_field14();
  inline void clear_has_field14();
  inline void set_has_field104();
  inline void clear_has_field104();
  inline void set_has_field100();
  inline void clear_has_field100();
  inline void set_has_field101();
  inline void clear_has_field101();
  inline void set_has_field102();
  inline void clear_has_field102();
  inline void set_has_field103();
  inline void clear_has_field103();
  inline void set_has_field29();
  inline void clear_has_field29();
  inline void set_has_field30();
  inline void clear_has_field30();
  inline void set_has_field60();
  inline void clear_has_field60();
  inline void set_has_field271();
  inline void clear_has_field271();
  inline void set_has_field272();
  inline void clear_has_field272();
  inline void set_has_field150();
  inline void clear_has_field150();
  inline void set_has_field23();
  inline void clear_has_field23();
  inline void set_has_field24();
  inline void clear_has_field24();
  inline void set_has_field25();
  inline void clear_has_field25();
  inline void set_has_field78();
  inline void clear_has_field78();
  inline void set_has_field67();
  inline void clear_has_field67();
  inline void set_has_field68();
  inline void clear_has_field68();
  inline void set_has_field128();
  inline void clear_has_field128();
  inline void set_has_field129();
  inline void clear_has_field129();
  inline void set_has_field131();
  inline void clear_has_field131();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::std::string* field1_;
  static ::std::string* _default_field1_;
  ::std::string* field9_;
  static ::std::string* _default_field9_;
  ::std::string* field18_;
  static ::std::string* _default_field18_;
  ::google::protobuf::int32 field2_;
  ::google::protobuf::int32 field3_;
  ::google::protobuf::int32 field280_;
  ::google::protobuf::int32 field6_;
  ::google::protobuf::int64 field22_;
  bool field80_;
  bool field81_;
  bool field59_;
  bool field12_;
  ::google::protobuf::int32 field16_;
  ::std::string* field4_;
  static ::std::string* _default_field4_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > field5_;
  ::std::string* field7_;
  static ::std::string* _default_field7_;
  ::google::protobuf::int32 field130_;
  ::google::protobuf::int32 field104_;
  bool field17_;
  bool field13_;
  bool field14_;
  bool field30_;
  ::google::protobuf::int32 field100_;
  ::std::string* field102_;
  static ::std::string* _default_field102_;
  ::google::protobuf::int32 field101_;
  ::google::protobuf::int32 field29_;
  ::std::string* field103_;
  static ::std::string* _default_field103_;
  ::google::protobuf::int32 field60_;
  ::google::protobuf::int32 field271_;
  ::google::protobuf::int32 field272_;
  ::google::protobuf::int32 field150_;
  ::google::protobuf::int32 field23_;
  ::google::protobuf::int32 field25_;
  bool field24_;
  bool field78_;
  ::google::protobuf::int32 field67_;
  ::google::protobuf::int32 field68_;
  ::google::protobuf::int32 field128_;
  ::std::string* field129_;
  static ::std::string* _default_field129_;
  ::google::protobuf::int32 field131_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_gen_5fechosrv_2eproto();
  friend void protobuf_AssignDesc_gen_5fechosrv_2eproto();
  friend void protobuf_ShutdownFile_gen_5fechosrv_2eproto();

  void InitAsDefaultInstance();
  static echo_request* default_instance_;
};
// -------------------------------------------------------------------

class echo_response : public ::google::protobuf::Message {
 public:
  echo_response();
  virtual ~echo_response();

  echo_response(const echo_response& from);

  inline echo_response& operator=(const echo_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const echo_response& default_instance();

  void Swap(echo_response* other);

  // implements Message ----------------------------------------------

  echo_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const echo_response& from);
  void MergeFrom(const echo_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string field1 = 8 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 8;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field9 = 9 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field9() const;
  inline void clear_field9();
  static const int kField9FieldNumber = 9;
  inline const ::std::string& field9() const;
  inline void set_field9(const ::std::string& value);
  inline void set_field9(const char* value);
  inline void set_field9(const char* value, size_t size);
  inline ::std::string* mutable_field9();
  inline ::std::string* release_field9();
  inline void set_allocated_field9(::std::string* field9);

  // optional string field18 = 18 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field18() const;
  inline void clear_field18();
  static const int kField18FieldNumber = 18;
  inline const ::std::string& field18() const;
  inline void set_field18(const ::std::string& value);
  inline void set_field18(const char* value);
  inline void set_field18(const char* value, size_t size);
  inline ::std::string* mutable_field18();
  inline ::std::string* release_field18();
  inline void set_allocated_field18(::std::string* field18);

  // optional bool field80 = 80 [default = false];
  inline bool has_field80() const;
  inline void clear_field80();
  static const int kField80FieldNumber = 80;
  inline bool field80() const;
  inline void set_field80(bool value);

  // optional bool field81 = 81 [default = true];
  inline bool has_field81() const;
  inline void clear_field81();
  static const int kField81FieldNumber = 81;
  inline bool field81() const;
  inline void set_field81(bool value);

  // optional int32 field2 = 2 [default = 1200003];
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline ::google::protobuf::int32 field2() const;
  inline void set_field2(::google::protobuf::int32 value);

  // optional int32 field3 = 3 [default = 1200003];
  inline bool has_field3() const;
  inline void clear_field3();
  static const int kField3FieldNumber = 3;
  inline ::google::protobuf::int32 field3() const;
  inline void set_field3(::google::protobuf::int32 value);

  // optional int32 field280 = 280 [default = 1200003];
  inline bool has_field280() const;
  inline void clear_field280();
  static const int kField280FieldNumber = 280;
  inline ::google::protobuf::int32 field280() const;
  inline void set_field280(::google::protobuf::int32 value);

  // optional int32 field6 = 6 [default = 1200003];
  inline bool has_field6() const;
  inline void clear_field6();
  static const int kField6FieldNumber = 6;
  inline ::google::protobuf::int32 field6() const;
  inline void set_field6(::google::protobuf::int32 value);

  // optional int64 field22 = 22;
  inline bool has_field22() const;
  inline void clear_field22();
  static const int kField22FieldNumber = 22;
  inline ::google::protobuf::int64 field22() const;
  inline void set_field22(::google::protobuf::int64 value);

  // optional string field4 = 4 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field4() const;
  inline void clear_field4();
  static const int kField4FieldNumber = 4;
  inline const ::std::string& field4() const;
  inline void set_field4(const ::std::string& value);
  inline void set_field4(const char* value);
  inline void set_field4(const char* value, size_t size);
  inline ::std::string* mutable_field4();
  inline ::std::string* release_field4();
  inline void set_allocated_field4(::std::string* field4);

  // repeated fixed64 field5 = 5;
  inline int field5_size() const;
  inline void clear_field5();
  static const int kField5FieldNumber = 5;
  inline ::google::protobuf::uint64 field5(int index) const;
  inline void set_field5(int index, ::google::protobuf::uint64 value);
  inline void add_field5(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      field5() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_field5();

  // optional bool field59 = 59 [default = false];
  inline bool has_field59() const;
  inline void clear_field59();
  static const int kField59FieldNumber = 59;
  inline bool field59() const;
  inline void set_field59(bool value);

  // optional string field7 = 7 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field7() const;
  inline void clear_field7();
  static const int kField7FieldNumber = 7;
  inline const ::std::string& field7() const;
  inline void set_field7(const ::std::string& value);
  inline void set_field7(const char* value);
  inline void set_field7(const char* value, size_t size);
  inline ::std::string* mutable_field7();
  inline ::std::string* release_field7();
  inline void set_allocated_field7(::std::string* field7);

  // optional int32 field16 = 16 [default = 1200003];
  inline bool has_field16() const;
  inline void clear_field16();
  static const int kField16FieldNumber = 16;
  inline ::google::protobuf::int32 field16() const;
  inline void set_field16(::google::protobuf::int32 value);

  // optional int32 field130 = 130 [default = 1200003];
  inline bool has_field130() const;
  inline void clear_field130();
  static const int kField130FieldNumber = 130;
  inline ::google::protobuf::int32 field130() const;
  inline void set_field130(::google::protobuf::int32 value);

  // optional bool field12 = 12 [default = true];
  inline bool has_field12() const;
  inline void clear_field12();
  static const int kField12FieldNumber = 12;
  inline bool field12() const;
  inline void set_field12(bool value);

  // optional bool field17 = 17 [default = true];
  inline bool has_field17() const;
  inline void clear_field17();
  static const int kField17FieldNumber = 17;
  inline bool field17() const;
  inline void set_field17(bool value);

  // optional bool field13 = 13 [default = true];
  inline bool has_field13() const;
  inline void clear_field13();
  static const int kField13FieldNumber = 13;
  inline bool field13() const;
  inline void set_field13(bool value);

  // optional bool field14 = 14 [default = true];
  inline bool has_field14() const;
  inline void clear_field14();
  static const int kField14FieldNumber = 14;
  inline bool field14() const;
  inline void set_field14(bool value);

  // optional int32 field104 = 104 [default = 1200003];
  inline bool has_field104() const;
  inline void clear_field104();
  static const int kField104FieldNumber = 104;
  inline ::google::protobuf::int32 field104() const;
  inline void set_field104(::google::protobuf::int32 value);

  // optional int32 field100 = 100 [default = 1200003];
  inline bool has_field100() const;
  inline void clear_field100();
  static const int kField100FieldNumber = 100;
  inline ::google::protobuf::int32 field100() const;
  inline void set_field100(::google::protobuf::int32 value);

  // optional int32 field101 = 101 [default = 1200003];
  inline bool has_field101() const;
  inline void clear_field101();
  static const int kField101FieldNumber = 101;
  inline ::google::protobuf::int32 field101() const;
  inline void set_field101(::google::protobuf::int32 value);

  // optional string field102 = 102 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field102() const;
  inline void clear_field102();
  static const int kField102FieldNumber = 102;
  inline const ::std::string& field102() const;
  inline void set_field102(const ::std::string& value);
  inline void set_field102(const char* value);
  inline void set_field102(const char* value, size_t size);
  inline ::std::string* mutable_field102();
  inline ::std::string* release_field102();
  inline void set_allocated_field102(::std::string* field102);

  // optional string field103 = 103 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field103() const;
  inline void clear_field103();
  static const int kField103FieldNumber = 103;
  inline const ::std::string& field103() const;
  inline void set_field103(const ::std::string& value);
  inline void set_field103(const char* value);
  inline void set_field103(const char* value, size_t size);
  inline ::std::string* mutable_field103();
  inline ::std::string* release_field103();
  inline void set_allocated_field103(::std::string* field103);

  // optional int32 field29 = 29 [default = 1200003];
  inline bool has_field29() const;
  inline void clear_field29();
  static const int kField29FieldNumber = 29;
  inline ::google::protobuf::int32 field29() const;
  inline void set_field29(::google::protobuf::int32 value);

  // optional bool field30 = 30 [default = false];
  inline bool has_field30() const;
  inline void clear_field30();
  static const int kField30FieldNumber = 30;
  inline bool field30() const;
  inline void set_field30(bool value);

  // optional int32 field60 = 60 [default = 1200003];
  inline bool has_field60() const;
  inline void clear_field60();
  static const int kField60FieldNumber = 60;
  inline ::google::protobuf::int32 field60() const;
  inline void set_field60(::google::protobuf::int32 value);

  // optional int32 field271 = 271 [default = 1200003];
  inline bool has_field271() const;
  inline void clear_field271();
  static const int kField271FieldNumber = 271;
  inline ::google::protobuf::int32 field271() const;
  inline void set_field271(::google::protobuf::int32 value);

  // optional int32 field272 = 272 [default = 1200003];
  inline bool has_field272() const;
  inline void clear_field272();
  static const int kField272FieldNumber = 272;
  inline ::google::protobuf::int32 field272() const;
  inline void set_field272(::google::protobuf::int32 value);

  // optional int32 field150 = 150 [default = 1200003];
  inline bool has_field150() const;
  inline void clear_field150();
  static const int kField150FieldNumber = 150;
  inline ::google::protobuf::int32 field150() const;
  inline void set_field150(::google::protobuf::int32 value);

  // optional int32 field23 = 23 [default = 1200003];
  inline bool has_field23() const;
  inline void clear_field23();
  static const int kField23FieldNumber = 23;
  inline ::google::protobuf::int32 field23() const;
  inline void set_field23(::google::protobuf::int32 value);

  // optional bool field24 = 24 [default = true];
  inline bool has_field24() const;
  inline void clear_field24();
  static const int kField24FieldNumber = 24;
  inline bool field24() const;
  inline void set_field24(bool value);

  // optional int32 field25 = 25 [default = 1200003];
  inline bool has_field25() const;
  inline void clear_field25();
  static const int kField25FieldNumber = 25;
  inline ::google::protobuf::int32 field25() const;
  inline void set_field25(::google::protobuf::int32 value);

  // optional bool field78 = 78;
  inline bool has_field78() const;
  inline void clear_field78();
  static const int kField78FieldNumber = 78;
  inline bool field78() const;
  inline void set_field78(bool value);

  // optional int32 field67 = 67 [default = 1200003];
  inline bool has_field67() const;
  inline void clear_field67();
  static const int kField67FieldNumber = 67;
  inline ::google::protobuf::int32 field67() const;
  inline void set_field67(::google::protobuf::int32 value);

  // optional int32 field68 = 68 [default = 1200003];
  inline bool has_field68() const;
  inline void clear_field68();
  static const int kField68FieldNumber = 68;
  inline ::google::protobuf::int32 field68() const;
  inline void set_field68(::google::protobuf::int32 value);

  // optional int32 field128 = 128 [default = 1200003];
  inline bool has_field128() const;
  inline void clear_field128();
  static const int kField128FieldNumber = 128;
  inline ::google::protobuf::int32 field128() const;
  inline void set_field128(::google::protobuf::int32 value);

  // optional string field129 = 129 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
  inline bool has_field129() const;
  inline void clear_field129();
  static const int kField129FieldNumber = 129;
  inline const ::std::string& field129() const;
  inline void set_field129(const ::std::string& value);
  inline void set_field129(const char* value);
  inline void set_field129(const char* value, size_t size);
  inline ::std::string* mutable_field129();
  inline ::std::string* release_field129();
  inline void set_allocated_field129(::std::string* field129);

  // optional int32 field131 = 131 [default = 1200003];
  inline bool has_field131() const;
  inline void clear_field131();
  static const int kField131FieldNumber = 131;
  inline ::google::protobuf::int32 field131() const;
  inline void set_field131(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test_srv.echo_response)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field9();
  inline void clear_has_field9();
  inline void set_has_field18();
  inline void clear_has_field18();
  inline void set_has_field80();
  inline void clear_has_field80();
  inline void set_has_field81();
  inline void clear_has_field81();
  inline void set_has_field2();
  inline void clear_has_field2();
  inline void set_has_field3();
  inline void clear_has_field3();
  inline void set_has_field280();
  inline void clear_has_field280();
  inline void set_has_field6();
  inline void clear_has_field6();
  inline void set_has_field22();
  inline void clear_has_field22();
  inline void set_has_field4();
  inline void clear_has_field4();
  inline void set_has_field59();
  inline void clear_has_field59();
  inline void set_has_field7();
  inline void clear_has_field7();
  inline void set_has_field16();
  inline void clear_has_field16();
  inline void set_has_field130();
  inline void clear_has_field130();
  inline void set_has_field12();
  inline void clear_has_field12();
  inline void set_has_field17();
  inline void clear_has_field17();
  inline void set_has_field13();
  inline void clear_has_field13();
  inline void set_has_field14();
  inline void clear_has_field14();
  inline void set_has_field104();
  inline void clear_has_field104();
  inline void set_has_field100();
  inline void clear_has_field100();
  inline void set_has_field101();
  inline void clear_has_field101();
  inline void set_has_field102();
  inline void clear_has_field102();
  inline void set_has_field103();
  inline void clear_has_field103();
  inline void set_has_field29();
  inline void clear_has_field29();
  inline void set_has_field30();
  inline void clear_has_field30();
  inline void set_has_field60();
  inline void clear_has_field60();
  inline void set_has_field271();
  inline void clear_has_field271();
  inline void set_has_field272();
  inline void clear_has_field272();
  inline void set_has_field150();
  inline void clear_has_field150();
  inline void set_has_field23();
  inline void clear_has_field23();
  inline void set_has_field24();
  inline void clear_has_field24();
  inline void set_has_field25();
  inline void clear_has_field25();
  inline void set_has_field78();
  inline void clear_has_field78();
  inline void set_has_field67();
  inline void clear_has_field67();
  inline void set_has_field68();
  inline void clear_has_field68();
  inline void set_has_field128();
  inline void clear_has_field128();
  inline void set_has_field129();
  inline void clear_has_field129();
  inline void set_has_field131();
  inline void clear_has_field131();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::std::string* field1_;
  static ::std::string* _default_field1_;
  ::std::string* field9_;
  static ::std::string* _default_field9_;
  ::std::string* field18_;
  static ::std::string* _default_field18_;
  ::google::protobuf::int32 field2_;
  ::google::protobuf::int32 field3_;
  ::google::protobuf::int32 field280_;
  ::google::protobuf::int32 field6_;
  ::google::protobuf::int64 field22_;
  bool field80_;
  bool field81_;
  bool field59_;
  bool field12_;
  ::google::protobuf::int32 field16_;
  ::std::string* field4_;
  static ::std::string* _default_field4_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > field5_;
  ::std::string* field7_;
  static ::std::string* _default_field7_;
  ::google::protobuf::int32 field130_;
  ::google::protobuf::int32 field104_;
  bool field17_;
  bool field13_;
  bool field14_;
  bool field30_;
  ::google::protobuf::int32 field100_;
  ::std::string* field102_;
  static ::std::string* _default_field102_;
  ::google::protobuf::int32 field101_;
  ::google::protobuf::int32 field29_;
  ::std::string* field103_;
  static ::std::string* _default_field103_;
  ::google::protobuf::int32 field60_;
  ::google::protobuf::int32 field271_;
  ::google::protobuf::int32 field272_;
  ::google::protobuf::int32 field150_;
  ::google::protobuf::int32 field23_;
  ::google::protobuf::int32 field25_;
  bool field24_;
  bool field78_;
  ::google::protobuf::int32 field67_;
  ::google::protobuf::int32 field68_;
  ::google::protobuf::int32 field128_;
  ::std::string* field129_;
  static ::std::string* _default_field129_;
  ::google::protobuf::int32 field131_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_gen_5fechosrv_2eproto();
  friend void protobuf_AssignDesc_gen_5fechosrv_2eproto();
  friend void protobuf_ShutdownFile_gen_5fechosrv_2eproto();

  void InitAsDefaultInstance();
  static echo_response* default_instance_;
};
// ===================================================================


// ===================================================================

// echo_request

// required string content = 1;
inline bool echo_request::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void echo_request::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void echo_request::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void echo_request::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& echo_request::content() const {
  return *content_;
}
inline void echo_request::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void echo_request::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void echo_request::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* echo_request::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void echo_request::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string field1 = 8 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void echo_request::set_has_field1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void echo_request::clear_has_field1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void echo_request::clear_field1() {
  if (field1_ != _default_field1_) {
    field1_->assign(*_default_field1_);
  }
  clear_has_field1();
}
inline const ::std::string& echo_request::field1() const {
  return *field1_;
}
inline void echo_request::set_field1(const ::std::string& value) {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void echo_request::set_field1(const char* value) {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void echo_request::set_field1(const char* value, size_t size) {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string;
  }
  field1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field1() {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string(*_default_field1_);
  }
  return field1_;
}
inline ::std::string* echo_request::release_field1() {
  clear_has_field1();
  if (field1_ == _default_field1_) {
    return NULL;
  } else {
    ::std::string* temp = field1_;
    field1_ = const_cast< ::std::string*>(_default_field1_);
    return temp;
  }
}
inline void echo_request::set_allocated_field1(::std::string* field1) {
  if (field1_ != _default_field1_) {
    delete field1_;
  }
  if (field1) {
    set_has_field1();
    field1_ = field1;
  } else {
    clear_has_field1();
    field1_ = const_cast< ::std::string*>(_default_field1_);
  }
}

// optional string field9 = 9 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field9() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void echo_request::set_has_field9() {
  _has_bits_[0] |= 0x00000004u;
}
inline void echo_request::clear_has_field9() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void echo_request::clear_field9() {
  if (field9_ != _default_field9_) {
    field9_->assign(*_default_field9_);
  }
  clear_has_field9();
}
inline const ::std::string& echo_request::field9() const {
  return *field9_;
}
inline void echo_request::set_field9(const ::std::string& value) {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string;
  }
  field9_->assign(value);
}
inline void echo_request::set_field9(const char* value) {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string;
  }
  field9_->assign(value);
}
inline void echo_request::set_field9(const char* value, size_t size) {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string;
  }
  field9_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field9() {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string(*_default_field9_);
  }
  return field9_;
}
inline ::std::string* echo_request::release_field9() {
  clear_has_field9();
  if (field9_ == _default_field9_) {
    return NULL;
  } else {
    ::std::string* temp = field9_;
    field9_ = const_cast< ::std::string*>(_default_field9_);
    return temp;
  }
}
inline void echo_request::set_allocated_field9(::std::string* field9) {
  if (field9_ != _default_field9_) {
    delete field9_;
  }
  if (field9) {
    set_has_field9();
    field9_ = field9;
  } else {
    clear_has_field9();
    field9_ = const_cast< ::std::string*>(_default_field9_);
  }
}

// optional string field18 = 18 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field18() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void echo_request::set_has_field18() {
  _has_bits_[0] |= 0x00000008u;
}
inline void echo_request::clear_has_field18() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void echo_request::clear_field18() {
  if (field18_ != _default_field18_) {
    field18_->assign(*_default_field18_);
  }
  clear_has_field18();
}
inline const ::std::string& echo_request::field18() const {
  return *field18_;
}
inline void echo_request::set_field18(const ::std::string& value) {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string;
  }
  field18_->assign(value);
}
inline void echo_request::set_field18(const char* value) {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string;
  }
  field18_->assign(value);
}
inline void echo_request::set_field18(const char* value, size_t size) {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string;
  }
  field18_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field18() {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string(*_default_field18_);
  }
  return field18_;
}
inline ::std::string* echo_request::release_field18() {
  clear_has_field18();
  if (field18_ == _default_field18_) {
    return NULL;
  } else {
    ::std::string* temp = field18_;
    field18_ = const_cast< ::std::string*>(_default_field18_);
    return temp;
  }
}
inline void echo_request::set_allocated_field18(::std::string* field18) {
  if (field18_ != _default_field18_) {
    delete field18_;
  }
  if (field18) {
    set_has_field18();
    field18_ = field18;
  } else {
    clear_has_field18();
    field18_ = const_cast< ::std::string*>(_default_field18_);
  }
}

// optional bool field80 = 80 [default = false];
inline bool echo_request::has_field80() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void echo_request::set_has_field80() {
  _has_bits_[0] |= 0x00000010u;
}
inline void echo_request::clear_has_field80() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void echo_request::clear_field80() {
  field80_ = false;
  clear_has_field80();
}
inline bool echo_request::field80() const {
  return field80_;
}
inline void echo_request::set_field80(bool value) {
  set_has_field80();
  field80_ = value;
}

// optional bool field81 = 81 [default = true];
inline bool echo_request::has_field81() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void echo_request::set_has_field81() {
  _has_bits_[0] |= 0x00000020u;
}
inline void echo_request::clear_has_field81() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void echo_request::clear_field81() {
  field81_ = true;
  clear_has_field81();
}
inline bool echo_request::field81() const {
  return field81_;
}
inline void echo_request::set_field81(bool value) {
  set_has_field81();
  field81_ = value;
}

// optional int32 field2 = 2 [default = 1200003];
inline bool echo_request::has_field2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void echo_request::set_has_field2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void echo_request::clear_has_field2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void echo_request::clear_field2() {
  field2_ = 1200003;
  clear_has_field2();
}
inline ::google::protobuf::int32 echo_request::field2() const {
  return field2_;
}
inline void echo_request::set_field2(::google::protobuf::int32 value) {
  set_has_field2();
  field2_ = value;
}

// optional int32 field3 = 3 [default = 1200003];
inline bool echo_request::has_field3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void echo_request::set_has_field3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void echo_request::clear_has_field3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void echo_request::clear_field3() {
  field3_ = 1200003;
  clear_has_field3();
}
inline ::google::protobuf::int32 echo_request::field3() const {
  return field3_;
}
inline void echo_request::set_field3(::google::protobuf::int32 value) {
  set_has_field3();
  field3_ = value;
}

// optional int32 field280 = 280 [default = 1200003];
inline bool echo_request::has_field280() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void echo_request::set_has_field280() {
  _has_bits_[0] |= 0x00000100u;
}
inline void echo_request::clear_has_field280() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void echo_request::clear_field280() {
  field280_ = 1200003;
  clear_has_field280();
}
inline ::google::protobuf::int32 echo_request::field280() const {
  return field280_;
}
inline void echo_request::set_field280(::google::protobuf::int32 value) {
  set_has_field280();
  field280_ = value;
}

// optional int32 field6 = 6 [default = 1200003];
inline bool echo_request::has_field6() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void echo_request::set_has_field6() {
  _has_bits_[0] |= 0x00000200u;
}
inline void echo_request::clear_has_field6() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void echo_request::clear_field6() {
  field6_ = 1200003;
  clear_has_field6();
}
inline ::google::protobuf::int32 echo_request::field6() const {
  return field6_;
}
inline void echo_request::set_field6(::google::protobuf::int32 value) {
  set_has_field6();
  field6_ = value;
}

// optional int64 field22 = 22;
inline bool echo_request::has_field22() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void echo_request::set_has_field22() {
  _has_bits_[0] |= 0x00000400u;
}
inline void echo_request::clear_has_field22() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void echo_request::clear_field22() {
  field22_ = GOOGLE_LONGLONG(0);
  clear_has_field22();
}
inline ::google::protobuf::int64 echo_request::field22() const {
  return field22_;
}
inline void echo_request::set_field22(::google::protobuf::int64 value) {
  set_has_field22();
  field22_ = value;
}

// optional string field4 = 4 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void echo_request::set_has_field4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void echo_request::clear_has_field4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void echo_request::clear_field4() {
  if (field4_ != _default_field4_) {
    field4_->assign(*_default_field4_);
  }
  clear_has_field4();
}
inline const ::std::string& echo_request::field4() const {
  return *field4_;
}
inline void echo_request::set_field4(const ::std::string& value) {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string;
  }
  field4_->assign(value);
}
inline void echo_request::set_field4(const char* value) {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string;
  }
  field4_->assign(value);
}
inline void echo_request::set_field4(const char* value, size_t size) {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string;
  }
  field4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field4() {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string(*_default_field4_);
  }
  return field4_;
}
inline ::std::string* echo_request::release_field4() {
  clear_has_field4();
  if (field4_ == _default_field4_) {
    return NULL;
  } else {
    ::std::string* temp = field4_;
    field4_ = const_cast< ::std::string*>(_default_field4_);
    return temp;
  }
}
inline void echo_request::set_allocated_field4(::std::string* field4) {
  if (field4_ != _default_field4_) {
    delete field4_;
  }
  if (field4) {
    set_has_field4();
    field4_ = field4;
  } else {
    clear_has_field4();
    field4_ = const_cast< ::std::string*>(_default_field4_);
  }
}

// repeated fixed64 field5 = 5;
inline int echo_request::field5_size() const {
  return field5_.size();
}
inline void echo_request::clear_field5() {
  field5_.Clear();
}
inline ::google::protobuf::uint64 echo_request::field5(int index) const {
  return field5_.Get(index);
}
inline void echo_request::set_field5(int index, ::google::protobuf::uint64 value) {
  field5_.Set(index, value);
}
inline void echo_request::add_field5(::google::protobuf::uint64 value) {
  field5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
echo_request::field5() const {
  return field5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
echo_request::mutable_field5() {
  return &field5_;
}

// optional bool field59 = 59 [default = false];
inline bool echo_request::has_field59() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void echo_request::set_has_field59() {
  _has_bits_[0] |= 0x00002000u;
}
inline void echo_request::clear_has_field59() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void echo_request::clear_field59() {
  field59_ = false;
  clear_has_field59();
}
inline bool echo_request::field59() const {
  return field59_;
}
inline void echo_request::set_field59(bool value) {
  set_has_field59();
  field59_ = value;
}

// optional string field7 = 7 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field7() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void echo_request::set_has_field7() {
  _has_bits_[0] |= 0x00004000u;
}
inline void echo_request::clear_has_field7() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void echo_request::clear_field7() {
  if (field7_ != _default_field7_) {
    field7_->assign(*_default_field7_);
  }
  clear_has_field7();
}
inline const ::std::string& echo_request::field7() const {
  return *field7_;
}
inline void echo_request::set_field7(const ::std::string& value) {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string;
  }
  field7_->assign(value);
}
inline void echo_request::set_field7(const char* value) {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string;
  }
  field7_->assign(value);
}
inline void echo_request::set_field7(const char* value, size_t size) {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string;
  }
  field7_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field7() {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string(*_default_field7_);
  }
  return field7_;
}
inline ::std::string* echo_request::release_field7() {
  clear_has_field7();
  if (field7_ == _default_field7_) {
    return NULL;
  } else {
    ::std::string* temp = field7_;
    field7_ = const_cast< ::std::string*>(_default_field7_);
    return temp;
  }
}
inline void echo_request::set_allocated_field7(::std::string* field7) {
  if (field7_ != _default_field7_) {
    delete field7_;
  }
  if (field7) {
    set_has_field7();
    field7_ = field7;
  } else {
    clear_has_field7();
    field7_ = const_cast< ::std::string*>(_default_field7_);
  }
}

// optional int32 field16 = 16 [default = 1200003];
inline bool echo_request::has_field16() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void echo_request::set_has_field16() {
  _has_bits_[0] |= 0x00008000u;
}
inline void echo_request::clear_has_field16() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void echo_request::clear_field16() {
  field16_ = 1200003;
  clear_has_field16();
}
inline ::google::protobuf::int32 echo_request::field16() const {
  return field16_;
}
inline void echo_request::set_field16(::google::protobuf::int32 value) {
  set_has_field16();
  field16_ = value;
}

// optional int32 field130 = 130 [default = 1200003];
inline bool echo_request::has_field130() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void echo_request::set_has_field130() {
  _has_bits_[0] |= 0x00010000u;
}
inline void echo_request::clear_has_field130() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void echo_request::clear_field130() {
  field130_ = 1200003;
  clear_has_field130();
}
inline ::google::protobuf::int32 echo_request::field130() const {
  return field130_;
}
inline void echo_request::set_field130(::google::protobuf::int32 value) {
  set_has_field130();
  field130_ = value;
}

// optional bool field12 = 12 [default = true];
inline bool echo_request::has_field12() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void echo_request::set_has_field12() {
  _has_bits_[0] |= 0x00020000u;
}
inline void echo_request::clear_has_field12() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void echo_request::clear_field12() {
  field12_ = true;
  clear_has_field12();
}
inline bool echo_request::field12() const {
  return field12_;
}
inline void echo_request::set_field12(bool value) {
  set_has_field12();
  field12_ = value;
}

// optional bool field17 = 17 [default = true];
inline bool echo_request::has_field17() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void echo_request::set_has_field17() {
  _has_bits_[0] |= 0x00040000u;
}
inline void echo_request::clear_has_field17() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void echo_request::clear_field17() {
  field17_ = true;
  clear_has_field17();
}
inline bool echo_request::field17() const {
  return field17_;
}
inline void echo_request::set_field17(bool value) {
  set_has_field17();
  field17_ = value;
}

// optional bool field13 = 13 [default = true];
inline bool echo_request::has_field13() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void echo_request::set_has_field13() {
  _has_bits_[0] |= 0x00080000u;
}
inline void echo_request::clear_has_field13() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void echo_request::clear_field13() {
  field13_ = true;
  clear_has_field13();
}
inline bool echo_request::field13() const {
  return field13_;
}
inline void echo_request::set_field13(bool value) {
  set_has_field13();
  field13_ = value;
}

// optional bool field14 = 14 [default = true];
inline bool echo_request::has_field14() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void echo_request::set_has_field14() {
  _has_bits_[0] |= 0x00100000u;
}
inline void echo_request::clear_has_field14() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void echo_request::clear_field14() {
  field14_ = true;
  clear_has_field14();
}
inline bool echo_request::field14() const {
  return field14_;
}
inline void echo_request::set_field14(bool value) {
  set_has_field14();
  field14_ = value;
}

// optional int32 field104 = 104 [default = 1200003];
inline bool echo_request::has_field104() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void echo_request::set_has_field104() {
  _has_bits_[0] |= 0x00200000u;
}
inline void echo_request::clear_has_field104() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void echo_request::clear_field104() {
  field104_ = 1200003;
  clear_has_field104();
}
inline ::google::protobuf::int32 echo_request::field104() const {
  return field104_;
}
inline void echo_request::set_field104(::google::protobuf::int32 value) {
  set_has_field104();
  field104_ = value;
}

// optional int32 field100 = 100 [default = 1200003];
inline bool echo_request::has_field100() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void echo_request::set_has_field100() {
  _has_bits_[0] |= 0x00400000u;
}
inline void echo_request::clear_has_field100() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void echo_request::clear_field100() {
  field100_ = 1200003;
  clear_has_field100();
}
inline ::google::protobuf::int32 echo_request::field100() const {
  return field100_;
}
inline void echo_request::set_field100(::google::protobuf::int32 value) {
  set_has_field100();
  field100_ = value;
}

// optional int32 field101 = 101 [default = 1200003];
inline bool echo_request::has_field101() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void echo_request::set_has_field101() {
  _has_bits_[0] |= 0x00800000u;
}
inline void echo_request::clear_has_field101() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void echo_request::clear_field101() {
  field101_ = 1200003;
  clear_has_field101();
}
inline ::google::protobuf::int32 echo_request::field101() const {
  return field101_;
}
inline void echo_request::set_field101(::google::protobuf::int32 value) {
  set_has_field101();
  field101_ = value;
}

// optional string field102 = 102 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field102() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void echo_request::set_has_field102() {
  _has_bits_[0] |= 0x01000000u;
}
inline void echo_request::clear_has_field102() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void echo_request::clear_field102() {
  if (field102_ != _default_field102_) {
    field102_->assign(*_default_field102_);
  }
  clear_has_field102();
}
inline const ::std::string& echo_request::field102() const {
  return *field102_;
}
inline void echo_request::set_field102(const ::std::string& value) {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string;
  }
  field102_->assign(value);
}
inline void echo_request::set_field102(const char* value) {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string;
  }
  field102_->assign(value);
}
inline void echo_request::set_field102(const char* value, size_t size) {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string;
  }
  field102_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field102() {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string(*_default_field102_);
  }
  return field102_;
}
inline ::std::string* echo_request::release_field102() {
  clear_has_field102();
  if (field102_ == _default_field102_) {
    return NULL;
  } else {
    ::std::string* temp = field102_;
    field102_ = const_cast< ::std::string*>(_default_field102_);
    return temp;
  }
}
inline void echo_request::set_allocated_field102(::std::string* field102) {
  if (field102_ != _default_field102_) {
    delete field102_;
  }
  if (field102) {
    set_has_field102();
    field102_ = field102;
  } else {
    clear_has_field102();
    field102_ = const_cast< ::std::string*>(_default_field102_);
  }
}

// optional string field103 = 103 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field103() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void echo_request::set_has_field103() {
  _has_bits_[0] |= 0x02000000u;
}
inline void echo_request::clear_has_field103() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void echo_request::clear_field103() {
  if (field103_ != _default_field103_) {
    field103_->assign(*_default_field103_);
  }
  clear_has_field103();
}
inline const ::std::string& echo_request::field103() const {
  return *field103_;
}
inline void echo_request::set_field103(const ::std::string& value) {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string;
  }
  field103_->assign(value);
}
inline void echo_request::set_field103(const char* value) {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string;
  }
  field103_->assign(value);
}
inline void echo_request::set_field103(const char* value, size_t size) {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string;
  }
  field103_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field103() {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string(*_default_field103_);
  }
  return field103_;
}
inline ::std::string* echo_request::release_field103() {
  clear_has_field103();
  if (field103_ == _default_field103_) {
    return NULL;
  } else {
    ::std::string* temp = field103_;
    field103_ = const_cast< ::std::string*>(_default_field103_);
    return temp;
  }
}
inline void echo_request::set_allocated_field103(::std::string* field103) {
  if (field103_ != _default_field103_) {
    delete field103_;
  }
  if (field103) {
    set_has_field103();
    field103_ = field103;
  } else {
    clear_has_field103();
    field103_ = const_cast< ::std::string*>(_default_field103_);
  }
}

// optional int32 field29 = 29 [default = 1200003];
inline bool echo_request::has_field29() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void echo_request::set_has_field29() {
  _has_bits_[0] |= 0x04000000u;
}
inline void echo_request::clear_has_field29() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void echo_request::clear_field29() {
  field29_ = 1200003;
  clear_has_field29();
}
inline ::google::protobuf::int32 echo_request::field29() const {
  return field29_;
}
inline void echo_request::set_field29(::google::protobuf::int32 value) {
  set_has_field29();
  field29_ = value;
}

// optional bool field30 = 30 [default = false];
inline bool echo_request::has_field30() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void echo_request::set_has_field30() {
  _has_bits_[0] |= 0x08000000u;
}
inline void echo_request::clear_has_field30() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void echo_request::clear_field30() {
  field30_ = false;
  clear_has_field30();
}
inline bool echo_request::field30() const {
  return field30_;
}
inline void echo_request::set_field30(bool value) {
  set_has_field30();
  field30_ = value;
}

// optional int32 field60 = 60 [default = 1200003];
inline bool echo_request::has_field60() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void echo_request::set_has_field60() {
  _has_bits_[0] |= 0x10000000u;
}
inline void echo_request::clear_has_field60() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void echo_request::clear_field60() {
  field60_ = 1200003;
  clear_has_field60();
}
inline ::google::protobuf::int32 echo_request::field60() const {
  return field60_;
}
inline void echo_request::set_field60(::google::protobuf::int32 value) {
  set_has_field60();
  field60_ = value;
}

// optional int32 field271 = 271 [default = 1200003];
inline bool echo_request::has_field271() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void echo_request::set_has_field271() {
  _has_bits_[0] |= 0x20000000u;
}
inline void echo_request::clear_has_field271() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void echo_request::clear_field271() {
  field271_ = 1200003;
  clear_has_field271();
}
inline ::google::protobuf::int32 echo_request::field271() const {
  return field271_;
}
inline void echo_request::set_field271(::google::protobuf::int32 value) {
  set_has_field271();
  field271_ = value;
}

// optional int32 field272 = 272 [default = 1200003];
inline bool echo_request::has_field272() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void echo_request::set_has_field272() {
  _has_bits_[0] |= 0x40000000u;
}
inline void echo_request::clear_has_field272() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void echo_request::clear_field272() {
  field272_ = 1200003;
  clear_has_field272();
}
inline ::google::protobuf::int32 echo_request::field272() const {
  return field272_;
}
inline void echo_request::set_field272(::google::protobuf::int32 value) {
  set_has_field272();
  field272_ = value;
}

// optional int32 field150 = 150 [default = 1200003];
inline bool echo_request::has_field150() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void echo_request::set_has_field150() {
  _has_bits_[0] |= 0x80000000u;
}
inline void echo_request::clear_has_field150() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void echo_request::clear_field150() {
  field150_ = 1200003;
  clear_has_field150();
}
inline ::google::protobuf::int32 echo_request::field150() const {
  return field150_;
}
inline void echo_request::set_field150(::google::protobuf::int32 value) {
  set_has_field150();
  field150_ = value;
}

// optional int32 field23 = 23 [default = 1200003];
inline bool echo_request::has_field23() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void echo_request::set_has_field23() {
  _has_bits_[1] |= 0x00000001u;
}
inline void echo_request::clear_has_field23() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void echo_request::clear_field23() {
  field23_ = 1200003;
  clear_has_field23();
}
inline ::google::protobuf::int32 echo_request::field23() const {
  return field23_;
}
inline void echo_request::set_field23(::google::protobuf::int32 value) {
  set_has_field23();
  field23_ = value;
}

// optional bool field24 = 24 [default = true];
inline bool echo_request::has_field24() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void echo_request::set_has_field24() {
  _has_bits_[1] |= 0x00000002u;
}
inline void echo_request::clear_has_field24() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void echo_request::clear_field24() {
  field24_ = true;
  clear_has_field24();
}
inline bool echo_request::field24() const {
  return field24_;
}
inline void echo_request::set_field24(bool value) {
  set_has_field24();
  field24_ = value;
}

// optional int32 field25 = 25 [default = 1200003];
inline bool echo_request::has_field25() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void echo_request::set_has_field25() {
  _has_bits_[1] |= 0x00000004u;
}
inline void echo_request::clear_has_field25() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void echo_request::clear_field25() {
  field25_ = 1200003;
  clear_has_field25();
}
inline ::google::protobuf::int32 echo_request::field25() const {
  return field25_;
}
inline void echo_request::set_field25(::google::protobuf::int32 value) {
  set_has_field25();
  field25_ = value;
}

// optional bool field78 = 78;
inline bool echo_request::has_field78() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void echo_request::set_has_field78() {
  _has_bits_[1] |= 0x00000008u;
}
inline void echo_request::clear_has_field78() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void echo_request::clear_field78() {
  field78_ = false;
  clear_has_field78();
}
inline bool echo_request::field78() const {
  return field78_;
}
inline void echo_request::set_field78(bool value) {
  set_has_field78();
  field78_ = value;
}

// optional int32 field67 = 67 [default = 1200003];
inline bool echo_request::has_field67() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void echo_request::set_has_field67() {
  _has_bits_[1] |= 0x00000010u;
}
inline void echo_request::clear_has_field67() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void echo_request::clear_field67() {
  field67_ = 1200003;
  clear_has_field67();
}
inline ::google::protobuf::int32 echo_request::field67() const {
  return field67_;
}
inline void echo_request::set_field67(::google::protobuf::int32 value) {
  set_has_field67();
  field67_ = value;
}

// optional int32 field68 = 68 [default = 1200003];
inline bool echo_request::has_field68() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void echo_request::set_has_field68() {
  _has_bits_[1] |= 0x00000020u;
}
inline void echo_request::clear_has_field68() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void echo_request::clear_field68() {
  field68_ = 1200003;
  clear_has_field68();
}
inline ::google::protobuf::int32 echo_request::field68() const {
  return field68_;
}
inline void echo_request::set_field68(::google::protobuf::int32 value) {
  set_has_field68();
  field68_ = value;
}

// optional int32 field128 = 128 [default = 1200003];
inline bool echo_request::has_field128() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void echo_request::set_has_field128() {
  _has_bits_[1] |= 0x00000040u;
}
inline void echo_request::clear_has_field128() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void echo_request::clear_field128() {
  field128_ = 1200003;
  clear_has_field128();
}
inline ::google::protobuf::int32 echo_request::field128() const {
  return field128_;
}
inline void echo_request::set_field128(::google::protobuf::int32 value) {
  set_has_field128();
  field128_ = value;
}

// optional string field129 = 129 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_request::has_field129() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void echo_request::set_has_field129() {
  _has_bits_[1] |= 0x00000080u;
}
inline void echo_request::clear_has_field129() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void echo_request::clear_field129() {
  if (field129_ != _default_field129_) {
    field129_->assign(*_default_field129_);
  }
  clear_has_field129();
}
inline const ::std::string& echo_request::field129() const {
  return *field129_;
}
inline void echo_request::set_field129(const ::std::string& value) {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string;
  }
  field129_->assign(value);
}
inline void echo_request::set_field129(const char* value) {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string;
  }
  field129_->assign(value);
}
inline void echo_request::set_field129(const char* value, size_t size) {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string;
  }
  field129_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_request::mutable_field129() {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string(*_default_field129_);
  }
  return field129_;
}
inline ::std::string* echo_request::release_field129() {
  clear_has_field129();
  if (field129_ == _default_field129_) {
    return NULL;
  } else {
    ::std::string* temp = field129_;
    field129_ = const_cast< ::std::string*>(_default_field129_);
    return temp;
  }
}
inline void echo_request::set_allocated_field129(::std::string* field129) {
  if (field129_ != _default_field129_) {
    delete field129_;
  }
  if (field129) {
    set_has_field129();
    field129_ = field129;
  } else {
    clear_has_field129();
    field129_ = const_cast< ::std::string*>(_default_field129_);
  }
}

// optional int32 field131 = 131 [default = 1200003];
inline bool echo_request::has_field131() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void echo_request::set_has_field131() {
  _has_bits_[1] |= 0x00000100u;
}
inline void echo_request::clear_has_field131() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void echo_request::clear_field131() {
  field131_ = 1200003;
  clear_has_field131();
}
inline ::google::protobuf::int32 echo_request::field131() const {
  return field131_;
}
inline void echo_request::set_field131(::google::protobuf::int32 value) {
  set_has_field131();
  field131_ = value;
}

// -------------------------------------------------------------------

// echo_response

// required string content = 1;
inline bool echo_response::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void echo_response::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void echo_response::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void echo_response::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& echo_response::content() const {
  return *content_;
}
inline void echo_response::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void echo_response::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void echo_response::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* echo_response::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void echo_response::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string field1 = 8 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void echo_response::set_has_field1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void echo_response::clear_has_field1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void echo_response::clear_field1() {
  if (field1_ != _default_field1_) {
    field1_->assign(*_default_field1_);
  }
  clear_has_field1();
}
inline const ::std::string& echo_response::field1() const {
  return *field1_;
}
inline void echo_response::set_field1(const ::std::string& value) {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void echo_response::set_field1(const char* value) {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void echo_response::set_field1(const char* value, size_t size) {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string;
  }
  field1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field1() {
  set_has_field1();
  if (field1_ == _default_field1_) {
    field1_ = new ::std::string(*_default_field1_);
  }
  return field1_;
}
inline ::std::string* echo_response::release_field1() {
  clear_has_field1();
  if (field1_ == _default_field1_) {
    return NULL;
  } else {
    ::std::string* temp = field1_;
    field1_ = const_cast< ::std::string*>(_default_field1_);
    return temp;
  }
}
inline void echo_response::set_allocated_field1(::std::string* field1) {
  if (field1_ != _default_field1_) {
    delete field1_;
  }
  if (field1) {
    set_has_field1();
    field1_ = field1;
  } else {
    clear_has_field1();
    field1_ = const_cast< ::std::string*>(_default_field1_);
  }
}

// optional string field9 = 9 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field9() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void echo_response::set_has_field9() {
  _has_bits_[0] |= 0x00000004u;
}
inline void echo_response::clear_has_field9() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void echo_response::clear_field9() {
  if (field9_ != _default_field9_) {
    field9_->assign(*_default_field9_);
  }
  clear_has_field9();
}
inline const ::std::string& echo_response::field9() const {
  return *field9_;
}
inline void echo_response::set_field9(const ::std::string& value) {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string;
  }
  field9_->assign(value);
}
inline void echo_response::set_field9(const char* value) {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string;
  }
  field9_->assign(value);
}
inline void echo_response::set_field9(const char* value, size_t size) {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string;
  }
  field9_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field9() {
  set_has_field9();
  if (field9_ == _default_field9_) {
    field9_ = new ::std::string(*_default_field9_);
  }
  return field9_;
}
inline ::std::string* echo_response::release_field9() {
  clear_has_field9();
  if (field9_ == _default_field9_) {
    return NULL;
  } else {
    ::std::string* temp = field9_;
    field9_ = const_cast< ::std::string*>(_default_field9_);
    return temp;
  }
}
inline void echo_response::set_allocated_field9(::std::string* field9) {
  if (field9_ != _default_field9_) {
    delete field9_;
  }
  if (field9) {
    set_has_field9();
    field9_ = field9;
  } else {
    clear_has_field9();
    field9_ = const_cast< ::std::string*>(_default_field9_);
  }
}

// optional string field18 = 18 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field18() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void echo_response::set_has_field18() {
  _has_bits_[0] |= 0x00000008u;
}
inline void echo_response::clear_has_field18() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void echo_response::clear_field18() {
  if (field18_ != _default_field18_) {
    field18_->assign(*_default_field18_);
  }
  clear_has_field18();
}
inline const ::std::string& echo_response::field18() const {
  return *field18_;
}
inline void echo_response::set_field18(const ::std::string& value) {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string;
  }
  field18_->assign(value);
}
inline void echo_response::set_field18(const char* value) {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string;
  }
  field18_->assign(value);
}
inline void echo_response::set_field18(const char* value, size_t size) {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string;
  }
  field18_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field18() {
  set_has_field18();
  if (field18_ == _default_field18_) {
    field18_ = new ::std::string(*_default_field18_);
  }
  return field18_;
}
inline ::std::string* echo_response::release_field18() {
  clear_has_field18();
  if (field18_ == _default_field18_) {
    return NULL;
  } else {
    ::std::string* temp = field18_;
    field18_ = const_cast< ::std::string*>(_default_field18_);
    return temp;
  }
}
inline void echo_response::set_allocated_field18(::std::string* field18) {
  if (field18_ != _default_field18_) {
    delete field18_;
  }
  if (field18) {
    set_has_field18();
    field18_ = field18;
  } else {
    clear_has_field18();
    field18_ = const_cast< ::std::string*>(_default_field18_);
  }
}

// optional bool field80 = 80 [default = false];
inline bool echo_response::has_field80() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void echo_response::set_has_field80() {
  _has_bits_[0] |= 0x00000010u;
}
inline void echo_response::clear_has_field80() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void echo_response::clear_field80() {
  field80_ = false;
  clear_has_field80();
}
inline bool echo_response::field80() const {
  return field80_;
}
inline void echo_response::set_field80(bool value) {
  set_has_field80();
  field80_ = value;
}

// optional bool field81 = 81 [default = true];
inline bool echo_response::has_field81() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void echo_response::set_has_field81() {
  _has_bits_[0] |= 0x00000020u;
}
inline void echo_response::clear_has_field81() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void echo_response::clear_field81() {
  field81_ = true;
  clear_has_field81();
}
inline bool echo_response::field81() const {
  return field81_;
}
inline void echo_response::set_field81(bool value) {
  set_has_field81();
  field81_ = value;
}

// optional int32 field2 = 2 [default = 1200003];
inline bool echo_response::has_field2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void echo_response::set_has_field2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void echo_response::clear_has_field2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void echo_response::clear_field2() {
  field2_ = 1200003;
  clear_has_field2();
}
inline ::google::protobuf::int32 echo_response::field2() const {
  return field2_;
}
inline void echo_response::set_field2(::google::protobuf::int32 value) {
  set_has_field2();
  field2_ = value;
}

// optional int32 field3 = 3 [default = 1200003];
inline bool echo_response::has_field3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void echo_response::set_has_field3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void echo_response::clear_has_field3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void echo_response::clear_field3() {
  field3_ = 1200003;
  clear_has_field3();
}
inline ::google::protobuf::int32 echo_response::field3() const {
  return field3_;
}
inline void echo_response::set_field3(::google::protobuf::int32 value) {
  set_has_field3();
  field3_ = value;
}

// optional int32 field280 = 280 [default = 1200003];
inline bool echo_response::has_field280() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void echo_response::set_has_field280() {
  _has_bits_[0] |= 0x00000100u;
}
inline void echo_response::clear_has_field280() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void echo_response::clear_field280() {
  field280_ = 1200003;
  clear_has_field280();
}
inline ::google::protobuf::int32 echo_response::field280() const {
  return field280_;
}
inline void echo_response::set_field280(::google::protobuf::int32 value) {
  set_has_field280();
  field280_ = value;
}

// optional int32 field6 = 6 [default = 1200003];
inline bool echo_response::has_field6() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void echo_response::set_has_field6() {
  _has_bits_[0] |= 0x00000200u;
}
inline void echo_response::clear_has_field6() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void echo_response::clear_field6() {
  field6_ = 1200003;
  clear_has_field6();
}
inline ::google::protobuf::int32 echo_response::field6() const {
  return field6_;
}
inline void echo_response::set_field6(::google::protobuf::int32 value) {
  set_has_field6();
  field6_ = value;
}

// optional int64 field22 = 22;
inline bool echo_response::has_field22() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void echo_response::set_has_field22() {
  _has_bits_[0] |= 0x00000400u;
}
inline void echo_response::clear_has_field22() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void echo_response::clear_field22() {
  field22_ = GOOGLE_LONGLONG(0);
  clear_has_field22();
}
inline ::google::protobuf::int64 echo_response::field22() const {
  return field22_;
}
inline void echo_response::set_field22(::google::protobuf::int64 value) {
  set_has_field22();
  field22_ = value;
}

// optional string field4 = 4 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void echo_response::set_has_field4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void echo_response::clear_has_field4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void echo_response::clear_field4() {
  if (field4_ != _default_field4_) {
    field4_->assign(*_default_field4_);
  }
  clear_has_field4();
}
inline const ::std::string& echo_response::field4() const {
  return *field4_;
}
inline void echo_response::set_field4(const ::std::string& value) {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string;
  }
  field4_->assign(value);
}
inline void echo_response::set_field4(const char* value) {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string;
  }
  field4_->assign(value);
}
inline void echo_response::set_field4(const char* value, size_t size) {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string;
  }
  field4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field4() {
  set_has_field4();
  if (field4_ == _default_field4_) {
    field4_ = new ::std::string(*_default_field4_);
  }
  return field4_;
}
inline ::std::string* echo_response::release_field4() {
  clear_has_field4();
  if (field4_ == _default_field4_) {
    return NULL;
  } else {
    ::std::string* temp = field4_;
    field4_ = const_cast< ::std::string*>(_default_field4_);
    return temp;
  }
}
inline void echo_response::set_allocated_field4(::std::string* field4) {
  if (field4_ != _default_field4_) {
    delete field4_;
  }
  if (field4) {
    set_has_field4();
    field4_ = field4;
  } else {
    clear_has_field4();
    field4_ = const_cast< ::std::string*>(_default_field4_);
  }
}

// repeated fixed64 field5 = 5;
inline int echo_response::field5_size() const {
  return field5_.size();
}
inline void echo_response::clear_field5() {
  field5_.Clear();
}
inline ::google::protobuf::uint64 echo_response::field5(int index) const {
  return field5_.Get(index);
}
inline void echo_response::set_field5(int index, ::google::protobuf::uint64 value) {
  field5_.Set(index, value);
}
inline void echo_response::add_field5(::google::protobuf::uint64 value) {
  field5_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
echo_response::field5() const {
  return field5_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
echo_response::mutable_field5() {
  return &field5_;
}

// optional bool field59 = 59 [default = false];
inline bool echo_response::has_field59() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void echo_response::set_has_field59() {
  _has_bits_[0] |= 0x00002000u;
}
inline void echo_response::clear_has_field59() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void echo_response::clear_field59() {
  field59_ = false;
  clear_has_field59();
}
inline bool echo_response::field59() const {
  return field59_;
}
inline void echo_response::set_field59(bool value) {
  set_has_field59();
  field59_ = value;
}

// optional string field7 = 7 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field7() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void echo_response::set_has_field7() {
  _has_bits_[0] |= 0x00004000u;
}
inline void echo_response::clear_has_field7() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void echo_response::clear_field7() {
  if (field7_ != _default_field7_) {
    field7_->assign(*_default_field7_);
  }
  clear_has_field7();
}
inline const ::std::string& echo_response::field7() const {
  return *field7_;
}
inline void echo_response::set_field7(const ::std::string& value) {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string;
  }
  field7_->assign(value);
}
inline void echo_response::set_field7(const char* value) {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string;
  }
  field7_->assign(value);
}
inline void echo_response::set_field7(const char* value, size_t size) {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string;
  }
  field7_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field7() {
  set_has_field7();
  if (field7_ == _default_field7_) {
    field7_ = new ::std::string(*_default_field7_);
  }
  return field7_;
}
inline ::std::string* echo_response::release_field7() {
  clear_has_field7();
  if (field7_ == _default_field7_) {
    return NULL;
  } else {
    ::std::string* temp = field7_;
    field7_ = const_cast< ::std::string*>(_default_field7_);
    return temp;
  }
}
inline void echo_response::set_allocated_field7(::std::string* field7) {
  if (field7_ != _default_field7_) {
    delete field7_;
  }
  if (field7) {
    set_has_field7();
    field7_ = field7;
  } else {
    clear_has_field7();
    field7_ = const_cast< ::std::string*>(_default_field7_);
  }
}

// optional int32 field16 = 16 [default = 1200003];
inline bool echo_response::has_field16() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void echo_response::set_has_field16() {
  _has_bits_[0] |= 0x00008000u;
}
inline void echo_response::clear_has_field16() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void echo_response::clear_field16() {
  field16_ = 1200003;
  clear_has_field16();
}
inline ::google::protobuf::int32 echo_response::field16() const {
  return field16_;
}
inline void echo_response::set_field16(::google::protobuf::int32 value) {
  set_has_field16();
  field16_ = value;
}

// optional int32 field130 = 130 [default = 1200003];
inline bool echo_response::has_field130() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void echo_response::set_has_field130() {
  _has_bits_[0] |= 0x00010000u;
}
inline void echo_response::clear_has_field130() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void echo_response::clear_field130() {
  field130_ = 1200003;
  clear_has_field130();
}
inline ::google::protobuf::int32 echo_response::field130() const {
  return field130_;
}
inline void echo_response::set_field130(::google::protobuf::int32 value) {
  set_has_field130();
  field130_ = value;
}

// optional bool field12 = 12 [default = true];
inline bool echo_response::has_field12() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void echo_response::set_has_field12() {
  _has_bits_[0] |= 0x00020000u;
}
inline void echo_response::clear_has_field12() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void echo_response::clear_field12() {
  field12_ = true;
  clear_has_field12();
}
inline bool echo_response::field12() const {
  return field12_;
}
inline void echo_response::set_field12(bool value) {
  set_has_field12();
  field12_ = value;
}

// optional bool field17 = 17 [default = true];
inline bool echo_response::has_field17() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void echo_response::set_has_field17() {
  _has_bits_[0] |= 0x00040000u;
}
inline void echo_response::clear_has_field17() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void echo_response::clear_field17() {
  field17_ = true;
  clear_has_field17();
}
inline bool echo_response::field17() const {
  return field17_;
}
inline void echo_response::set_field17(bool value) {
  set_has_field17();
  field17_ = value;
}

// optional bool field13 = 13 [default = true];
inline bool echo_response::has_field13() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void echo_response::set_has_field13() {
  _has_bits_[0] |= 0x00080000u;
}
inline void echo_response::clear_has_field13() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void echo_response::clear_field13() {
  field13_ = true;
  clear_has_field13();
}
inline bool echo_response::field13() const {
  return field13_;
}
inline void echo_response::set_field13(bool value) {
  set_has_field13();
  field13_ = value;
}

// optional bool field14 = 14 [default = true];
inline bool echo_response::has_field14() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void echo_response::set_has_field14() {
  _has_bits_[0] |= 0x00100000u;
}
inline void echo_response::clear_has_field14() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void echo_response::clear_field14() {
  field14_ = true;
  clear_has_field14();
}
inline bool echo_response::field14() const {
  return field14_;
}
inline void echo_response::set_field14(bool value) {
  set_has_field14();
  field14_ = value;
}

// optional int32 field104 = 104 [default = 1200003];
inline bool echo_response::has_field104() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void echo_response::set_has_field104() {
  _has_bits_[0] |= 0x00200000u;
}
inline void echo_response::clear_has_field104() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void echo_response::clear_field104() {
  field104_ = 1200003;
  clear_has_field104();
}
inline ::google::protobuf::int32 echo_response::field104() const {
  return field104_;
}
inline void echo_response::set_field104(::google::protobuf::int32 value) {
  set_has_field104();
  field104_ = value;
}

// optional int32 field100 = 100 [default = 1200003];
inline bool echo_response::has_field100() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void echo_response::set_has_field100() {
  _has_bits_[0] |= 0x00400000u;
}
inline void echo_response::clear_has_field100() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void echo_response::clear_field100() {
  field100_ = 1200003;
  clear_has_field100();
}
inline ::google::protobuf::int32 echo_response::field100() const {
  return field100_;
}
inline void echo_response::set_field100(::google::protobuf::int32 value) {
  set_has_field100();
  field100_ = value;
}

// optional int32 field101 = 101 [default = 1200003];
inline bool echo_response::has_field101() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void echo_response::set_has_field101() {
  _has_bits_[0] |= 0x00800000u;
}
inline void echo_response::clear_has_field101() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void echo_response::clear_field101() {
  field101_ = 1200003;
  clear_has_field101();
}
inline ::google::protobuf::int32 echo_response::field101() const {
  return field101_;
}
inline void echo_response::set_field101(::google::protobuf::int32 value) {
  set_has_field101();
  field101_ = value;
}

// optional string field102 = 102 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field102() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void echo_response::set_has_field102() {
  _has_bits_[0] |= 0x01000000u;
}
inline void echo_response::clear_has_field102() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void echo_response::clear_field102() {
  if (field102_ != _default_field102_) {
    field102_->assign(*_default_field102_);
  }
  clear_has_field102();
}
inline const ::std::string& echo_response::field102() const {
  return *field102_;
}
inline void echo_response::set_field102(const ::std::string& value) {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string;
  }
  field102_->assign(value);
}
inline void echo_response::set_field102(const char* value) {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string;
  }
  field102_->assign(value);
}
inline void echo_response::set_field102(const char* value, size_t size) {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string;
  }
  field102_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field102() {
  set_has_field102();
  if (field102_ == _default_field102_) {
    field102_ = new ::std::string(*_default_field102_);
  }
  return field102_;
}
inline ::std::string* echo_response::release_field102() {
  clear_has_field102();
  if (field102_ == _default_field102_) {
    return NULL;
  } else {
    ::std::string* temp = field102_;
    field102_ = const_cast< ::std::string*>(_default_field102_);
    return temp;
  }
}
inline void echo_response::set_allocated_field102(::std::string* field102) {
  if (field102_ != _default_field102_) {
    delete field102_;
  }
  if (field102) {
    set_has_field102();
    field102_ = field102;
  } else {
    clear_has_field102();
    field102_ = const_cast< ::std::string*>(_default_field102_);
  }
}

// optional string field103 = 103 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field103() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void echo_response::set_has_field103() {
  _has_bits_[0] |= 0x02000000u;
}
inline void echo_response::clear_has_field103() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void echo_response::clear_field103() {
  if (field103_ != _default_field103_) {
    field103_->assign(*_default_field103_);
  }
  clear_has_field103();
}
inline const ::std::string& echo_response::field103() const {
  return *field103_;
}
inline void echo_response::set_field103(const ::std::string& value) {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string;
  }
  field103_->assign(value);
}
inline void echo_response::set_field103(const char* value) {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string;
  }
  field103_->assign(value);
}
inline void echo_response::set_field103(const char* value, size_t size) {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string;
  }
  field103_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field103() {
  set_has_field103();
  if (field103_ == _default_field103_) {
    field103_ = new ::std::string(*_default_field103_);
  }
  return field103_;
}
inline ::std::string* echo_response::release_field103() {
  clear_has_field103();
  if (field103_ == _default_field103_) {
    return NULL;
  } else {
    ::std::string* temp = field103_;
    field103_ = const_cast< ::std::string*>(_default_field103_);
    return temp;
  }
}
inline void echo_response::set_allocated_field103(::std::string* field103) {
  if (field103_ != _default_field103_) {
    delete field103_;
  }
  if (field103) {
    set_has_field103();
    field103_ = field103;
  } else {
    clear_has_field103();
    field103_ = const_cast< ::std::string*>(_default_field103_);
  }
}

// optional int32 field29 = 29 [default = 1200003];
inline bool echo_response::has_field29() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void echo_response::set_has_field29() {
  _has_bits_[0] |= 0x04000000u;
}
inline void echo_response::clear_has_field29() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void echo_response::clear_field29() {
  field29_ = 1200003;
  clear_has_field29();
}
inline ::google::protobuf::int32 echo_response::field29() const {
  return field29_;
}
inline void echo_response::set_field29(::google::protobuf::int32 value) {
  set_has_field29();
  field29_ = value;
}

// optional bool field30 = 30 [default = false];
inline bool echo_response::has_field30() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void echo_response::set_has_field30() {
  _has_bits_[0] |= 0x08000000u;
}
inline void echo_response::clear_has_field30() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void echo_response::clear_field30() {
  field30_ = false;
  clear_has_field30();
}
inline bool echo_response::field30() const {
  return field30_;
}
inline void echo_response::set_field30(bool value) {
  set_has_field30();
  field30_ = value;
}

// optional int32 field60 = 60 [default = 1200003];
inline bool echo_response::has_field60() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void echo_response::set_has_field60() {
  _has_bits_[0] |= 0x10000000u;
}
inline void echo_response::clear_has_field60() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void echo_response::clear_field60() {
  field60_ = 1200003;
  clear_has_field60();
}
inline ::google::protobuf::int32 echo_response::field60() const {
  return field60_;
}
inline void echo_response::set_field60(::google::protobuf::int32 value) {
  set_has_field60();
  field60_ = value;
}

// optional int32 field271 = 271 [default = 1200003];
inline bool echo_response::has_field271() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void echo_response::set_has_field271() {
  _has_bits_[0] |= 0x20000000u;
}
inline void echo_response::clear_has_field271() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void echo_response::clear_field271() {
  field271_ = 1200003;
  clear_has_field271();
}
inline ::google::protobuf::int32 echo_response::field271() const {
  return field271_;
}
inline void echo_response::set_field271(::google::protobuf::int32 value) {
  set_has_field271();
  field271_ = value;
}

// optional int32 field272 = 272 [default = 1200003];
inline bool echo_response::has_field272() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void echo_response::set_has_field272() {
  _has_bits_[0] |= 0x40000000u;
}
inline void echo_response::clear_has_field272() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void echo_response::clear_field272() {
  field272_ = 1200003;
  clear_has_field272();
}
inline ::google::protobuf::int32 echo_response::field272() const {
  return field272_;
}
inline void echo_response::set_field272(::google::protobuf::int32 value) {
  set_has_field272();
  field272_ = value;
}

// optional int32 field150 = 150 [default = 1200003];
inline bool echo_response::has_field150() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void echo_response::set_has_field150() {
  _has_bits_[0] |= 0x80000000u;
}
inline void echo_response::clear_has_field150() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void echo_response::clear_field150() {
  field150_ = 1200003;
  clear_has_field150();
}
inline ::google::protobuf::int32 echo_response::field150() const {
  return field150_;
}
inline void echo_response::set_field150(::google::protobuf::int32 value) {
  set_has_field150();
  field150_ = value;
}

// optional int32 field23 = 23 [default = 1200003];
inline bool echo_response::has_field23() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void echo_response::set_has_field23() {
  _has_bits_[1] |= 0x00000001u;
}
inline void echo_response::clear_has_field23() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void echo_response::clear_field23() {
  field23_ = 1200003;
  clear_has_field23();
}
inline ::google::protobuf::int32 echo_response::field23() const {
  return field23_;
}
inline void echo_response::set_field23(::google::protobuf::int32 value) {
  set_has_field23();
  field23_ = value;
}

// optional bool field24 = 24 [default = true];
inline bool echo_response::has_field24() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void echo_response::set_has_field24() {
  _has_bits_[1] |= 0x00000002u;
}
inline void echo_response::clear_has_field24() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void echo_response::clear_field24() {
  field24_ = true;
  clear_has_field24();
}
inline bool echo_response::field24() const {
  return field24_;
}
inline void echo_response::set_field24(bool value) {
  set_has_field24();
  field24_ = value;
}

// optional int32 field25 = 25 [default = 1200003];
inline bool echo_response::has_field25() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void echo_response::set_has_field25() {
  _has_bits_[1] |= 0x00000004u;
}
inline void echo_response::clear_has_field25() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void echo_response::clear_field25() {
  field25_ = 1200003;
  clear_has_field25();
}
inline ::google::protobuf::int32 echo_response::field25() const {
  return field25_;
}
inline void echo_response::set_field25(::google::protobuf::int32 value) {
  set_has_field25();
  field25_ = value;
}

// optional bool field78 = 78;
inline bool echo_response::has_field78() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void echo_response::set_has_field78() {
  _has_bits_[1] |= 0x00000008u;
}
inline void echo_response::clear_has_field78() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void echo_response::clear_field78() {
  field78_ = false;
  clear_has_field78();
}
inline bool echo_response::field78() const {
  return field78_;
}
inline void echo_response::set_field78(bool value) {
  set_has_field78();
  field78_ = value;
}

// optional int32 field67 = 67 [default = 1200003];
inline bool echo_response::has_field67() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void echo_response::set_has_field67() {
  _has_bits_[1] |= 0x00000010u;
}
inline void echo_response::clear_has_field67() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void echo_response::clear_field67() {
  field67_ = 1200003;
  clear_has_field67();
}
inline ::google::protobuf::int32 echo_response::field67() const {
  return field67_;
}
inline void echo_response::set_field67(::google::protobuf::int32 value) {
  set_has_field67();
  field67_ = value;
}

// optional int32 field68 = 68 [default = 1200003];
inline bool echo_response::has_field68() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void echo_response::set_has_field68() {
  _has_bits_[1] |= 0x00000020u;
}
inline void echo_response::clear_has_field68() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void echo_response::clear_field68() {
  field68_ = 1200003;
  clear_has_field68();
}
inline ::google::protobuf::int32 echo_response::field68() const {
  return field68_;
}
inline void echo_response::set_field68(::google::protobuf::int32 value) {
  set_has_field68();
  field68_ = value;
}

// optional int32 field128 = 128 [default = 1200003];
inline bool echo_response::has_field128() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void echo_response::set_has_field128() {
  _has_bits_[1] |= 0x00000040u;
}
inline void echo_response::clear_has_field128() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void echo_response::clear_field128() {
  field128_ = 1200003;
  clear_has_field128();
}
inline ::google::protobuf::int32 echo_response::field128() const {
  return field128_;
}
inline void echo_response::set_field128(::google::protobuf::int32 value) {
  set_has_field128();
  field128_ = value;
}

// optional string field129 = 129 [default = "\350\256\270\345\244\232\345\276\200\344\272\213\345\234\250\347\234\274\345\211\215\344\270\200\345\271\225\344\270\200\345\271\225\357\274\214\345\217\230\347\232\204\351\202\243\351\272\274\346\250\241\347\263\212"];
inline bool echo_response::has_field129() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void echo_response::set_has_field129() {
  _has_bits_[1] |= 0x00000080u;
}
inline void echo_response::clear_has_field129() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void echo_response::clear_field129() {
  if (field129_ != _default_field129_) {
    field129_->assign(*_default_field129_);
  }
  clear_has_field129();
}
inline const ::std::string& echo_response::field129() const {
  return *field129_;
}
inline void echo_response::set_field129(const ::std::string& value) {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string;
  }
  field129_->assign(value);
}
inline void echo_response::set_field129(const char* value) {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string;
  }
  field129_->assign(value);
}
inline void echo_response::set_field129(const char* value, size_t size) {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string;
  }
  field129_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* echo_response::mutable_field129() {
  set_has_field129();
  if (field129_ == _default_field129_) {
    field129_ = new ::std::string(*_default_field129_);
  }
  return field129_;
}
inline ::std::string* echo_response::release_field129() {
  clear_has_field129();
  if (field129_ == _default_field129_) {
    return NULL;
  } else {
    ::std::string* temp = field129_;
    field129_ = const_cast< ::std::string*>(_default_field129_);
    return temp;
  }
}
inline void echo_response::set_allocated_field129(::std::string* field129) {
  if (field129_ != _default_field129_) {
    delete field129_;
  }
  if (field129) {
    set_has_field129();
    field129_ = field129;
  } else {
    clear_has_field129();
    field129_ = const_cast< ::std::string*>(_default_field129_);
  }
}

// optional int32 field131 = 131 [default = 1200003];
inline bool echo_response::has_field131() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void echo_response::set_has_field131() {
  _has_bits_[1] |= 0x00000100u;
}
inline void echo_response::clear_has_field131() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void echo_response::clear_field131() {
  field131_ = 1200003;
  clear_has_field131();
}
inline ::google::protobuf::int32 echo_response::field131() const {
  return field131_;
}
inline void echo_response::set_field131(::google::protobuf::int32 value) {
  set_has_field131();
  field131_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test_srv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gen_5fechosrv_2eproto__INCLUDED
