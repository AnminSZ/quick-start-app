// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gen_proto/gen_swoole_test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gen_swoole_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test_swoole {

namespace {

const ::google::protobuf::Descriptor* req_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_publisher_topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_publisher_topic_reflection_ = NULL;
const ::google::protobuf::Descriptor* rsp_publisher_topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rsp_publisher_topic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto() {
  protobuf_AddDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gen_proto/gen_swoole_test.proto");
  GOOGLE_CHECK(file != NULL);
  req_content_descriptor_ = file->message_type(0);
  static const int req_content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_content, video_id_),
  };
  req_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_content_descriptor_,
      req_content::default_instance_,
      req_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_content));
  req_publisher_topic_descriptor_ = file->message_type(1);
  static const int req_publisher_topic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, msg_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, timestamp_),
  };
  req_publisher_topic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_publisher_topic_descriptor_,
      req_publisher_topic::default_instance_,
      req_publisher_topic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_publisher_topic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_publisher_topic));
  rsp_publisher_topic_descriptor_ = file->message_type(2);
  static const int rsp_publisher_topic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_publisher_topic, state_),
  };
  rsp_publisher_topic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rsp_publisher_topic_descriptor_,
      rsp_publisher_topic::default_instance_,
      rsp_publisher_topic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_publisher_topic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_publisher_topic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rsp_publisher_topic));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_content_descriptor_, &req_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_publisher_topic_descriptor_, &req_publisher_topic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rsp_publisher_topic_descriptor_, &rsp_publisher_topic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gen_5fproto_2fgen_5fswoole_5ftest_2eproto() {
  delete req_content::default_instance_;
  delete req_content_reflection_;
  delete req_publisher_topic::default_instance_;
  delete req_publisher_topic_reflection_;
  delete rsp_publisher_topic::default_instance_;
  delete rsp_publisher_topic_reflection_;
}

void protobuf_AddDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037gen_proto/gen_swoole_test.proto\022\013test_"
    "swoole\"\037\n\013req_content\022\020\n\010video_id\030\001 \001(\t\""
    "\207\001\n\023req_publisher_topic\022\r\n\005topic\030\001 \001(\t\022\016"
    "\n\006msg_id\030\002 \001(\t\022\017\n\007msg_key\030\003 \001(\t\022-\n\013msg_c"
    "ontent\030\004 \001(\0132\030.test_swoole.req_content\022\021"
    "\n\ttimestamp\030\005 \001(\001\"$\n\023rsp_publisher_topic"
    "\022\r\n\005state\030\001 \001(\005", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gen_proto/gen_swoole_test.proto", &protobuf_RegisterTypes);
  req_content::default_instance_ = new req_content();
  req_publisher_topic::default_instance_ = new req_publisher_topic();
  rsp_publisher_topic::default_instance_ = new rsp_publisher_topic();
  req_content::default_instance_->InitAsDefaultInstance();
  req_publisher_topic::default_instance_->InitAsDefaultInstance();
  rsp_publisher_topic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gen_5fproto_2fgen_5fswoole_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gen_5fproto_2fgen_5fswoole_5ftest_2eproto {
  StaticDescriptorInitializer_gen_5fproto_2fgen_5fswoole_5ftest_2eproto() {
    protobuf_AddDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto();
  }
} static_descriptor_initializer_gen_5fproto_2fgen_5fswoole_5ftest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int req_content::kVideoIdFieldNumber;
#endif  // !_MSC_VER

req_content::req_content()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_content::InitAsDefaultInstance() {
}

req_content::req_content(const req_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_content::SharedCtor() {
  _cached_size_ = 0;
  video_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_content::~req_content() {
  SharedDtor();
}

void req_content::SharedDtor() {
  if (video_id_ != &::google::protobuf::internal::kEmptyString) {
    delete video_id_;
  }
  if (this != default_instance_) {
  }
}

void req_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_content_descriptor_;
}

const req_content& req_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto();
  return *default_instance_;
}

req_content* req_content::default_instance_ = NULL;

req_content* req_content::New() const {
  return new req_content;
}

void req_content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_video_id()) {
      if (video_id_ != &::google::protobuf::internal::kEmptyString) {
        video_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string video_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->video_id().data(), this->video_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string video_id = 1;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_id().data(), this->video_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->video_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string video_id = 1;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_id().data(), this->video_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->video_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string video_id = 1;
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_content::MergeFrom(const req_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_content::CopyFrom(const req_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_content::IsInitialized() const {

  return true;
}

void req_content::Swap(req_content* other) {
  if (other != this) {
    std::swap(video_id_, other->video_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_content_descriptor_;
  metadata.reflection = req_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int req_publisher_topic::kTopicFieldNumber;
const int req_publisher_topic::kMsgIdFieldNumber;
const int req_publisher_topic::kMsgKeyFieldNumber;
const int req_publisher_topic::kMsgContentFieldNumber;
const int req_publisher_topic::kTimestampFieldNumber;
#endif  // !_MSC_VER

req_publisher_topic::req_publisher_topic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_publisher_topic::InitAsDefaultInstance() {
  msg_content_ = const_cast< ::test_swoole::req_content*>(&::test_swoole::req_content::default_instance());
}

req_publisher_topic::req_publisher_topic(const req_publisher_topic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_publisher_topic::SharedCtor() {
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_content_ = NULL;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_publisher_topic::~req_publisher_topic() {
  SharedDtor();
}

void req_publisher_topic::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (msg_id_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_id_;
  }
  if (msg_key_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_key_;
  }
  if (this != default_instance_) {
    delete msg_content_;
  }
}

void req_publisher_topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_publisher_topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_publisher_topic_descriptor_;
}

const req_publisher_topic& req_publisher_topic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto();
  return *default_instance_;
}

req_publisher_topic* req_publisher_topic::default_instance_ = NULL;

req_publisher_topic* req_publisher_topic::New() const {
  return new req_publisher_topic;
}

void req_publisher_topic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    if (has_msg_id()) {
      if (msg_id_ != &::google::protobuf::internal::kEmptyString) {
        msg_id_->clear();
      }
    }
    if (has_msg_key()) {
      if (msg_key_ != &::google::protobuf::internal::kEmptyString) {
        msg_key_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != NULL) msg_content_->::test_swoole::req_content::Clear();
    }
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_publisher_topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_id;
        break;
      }

      // optional string msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_id().data(), this->msg_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_key;
        break;
      }

      // optional string msg_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_key().data(), this->msg_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_content;
        break;
      }

      // optional .test_swoole.req_content msg_content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_publisher_topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic(), output);
  }

  // optional string msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_id().data(), this->msg_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg_id(), output);
  }

  // optional string msg_key = 3;
  if (has_msg_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_key().data(), this->msg_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_key(), output);
  }

  // optional .test_swoole.req_content msg_content = 4;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg_content(), output);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_publisher_topic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // optional string msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_id().data(), this->msg_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_id(), target);
  }

  // optional string msg_key = 3;
  if (has_msg_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_key().data(), this->msg_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_key(), target);
  }

  // optional .test_swoole.req_content msg_content = 4;
  if (has_msg_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg_content(), target);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_publisher_topic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_id());
    }

    // optional string msg_key = 3;
    if (has_msg_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_key());
    }

    // optional .test_swoole.req_content msg_content = 4;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_content());
    }

    // optional double timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_publisher_topic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_publisher_topic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_publisher_topic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_publisher_topic::MergeFrom(const req_publisher_topic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_key()) {
      set_msg_key(from.msg_key());
    }
    if (from.has_msg_content()) {
      mutable_msg_content()->::test_swoole::req_content::MergeFrom(from.msg_content());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_publisher_topic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_publisher_topic::CopyFrom(const req_publisher_topic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_publisher_topic::IsInitialized() const {

  return true;
}

void req_publisher_topic::Swap(req_publisher_topic* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_key_, other->msg_key_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_publisher_topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_publisher_topic_descriptor_;
  metadata.reflection = req_publisher_topic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rsp_publisher_topic::kStateFieldNumber;
#endif  // !_MSC_VER

rsp_publisher_topic::rsp_publisher_topic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rsp_publisher_topic::InitAsDefaultInstance() {
}

rsp_publisher_topic::rsp_publisher_topic(const rsp_publisher_topic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rsp_publisher_topic::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rsp_publisher_topic::~rsp_publisher_topic() {
  SharedDtor();
}

void rsp_publisher_topic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rsp_publisher_topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_publisher_topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rsp_publisher_topic_descriptor_;
}

const rsp_publisher_topic& rsp_publisher_topic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gen_5fproto_2fgen_5fswoole_5ftest_2eproto();
  return *default_instance_;
}

rsp_publisher_topic* rsp_publisher_topic::default_instance_ = NULL;

rsp_publisher_topic* rsp_publisher_topic::New() const {
  return new rsp_publisher_topic;
}

void rsp_publisher_topic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rsp_publisher_topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rsp_publisher_topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rsp_publisher_topic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rsp_publisher_topic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_publisher_topic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rsp_publisher_topic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rsp_publisher_topic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rsp_publisher_topic::MergeFrom(const rsp_publisher_topic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rsp_publisher_topic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_publisher_topic::CopyFrom(const rsp_publisher_topic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_publisher_topic::IsInitialized() const {

  return true;
}

void rsp_publisher_topic::Swap(rsp_publisher_topic* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rsp_publisher_topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rsp_publisher_topic_descriptor_;
  metadata.reflection = rsp_publisher_topic_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test_swoole

// @@protoc_insertion_point(global_scope)
