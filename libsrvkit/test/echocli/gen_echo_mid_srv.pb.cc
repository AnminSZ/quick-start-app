// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mid/gen_proto/gen_echo_mid_srv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gen_echo_mid_srv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mid_echo_srv {

namespace {

const ::google::protobuf::Descriptor* mid_echo_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mid_echo_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mid_echo_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mid_echo_response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto() {
  protobuf_AddDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mid/gen_proto/gen_echo_mid_srv.proto");
  GOOGLE_CHECK(file != NULL);
  mid_echo_request_descriptor_ = file->message_type(0);
  static const int mid_echo_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mid_echo_request, content_),
  };
  mid_echo_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mid_echo_request_descriptor_,
      mid_echo_request::default_instance_,
      mid_echo_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mid_echo_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mid_echo_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mid_echo_request));
  mid_echo_response_descriptor_ = file->message_type(1);
  static const int mid_echo_response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mid_echo_response, content_),
  };
  mid_echo_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mid_echo_response_descriptor_,
      mid_echo_response::default_instance_,
      mid_echo_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mid_echo_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mid_echo_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mid_echo_response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mid_echo_request_descriptor_, &mid_echo_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mid_echo_response_descriptor_, &mid_echo_response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto() {
  delete mid_echo_request::default_instance_;
  delete mid_echo_request_reflection_;
  delete mid_echo_response::default_instance_;
  delete mid_echo_response_reflection_;
}

void protobuf_AddDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$mid/gen_proto/gen_echo_mid_srv.proto\022\014"
    "mid_echo_srv\"#\n\020mid_echo_request\022\017\n\007cont"
    "ent\030\001 \002(\t\"$\n\021mid_echo_response\022\017\n\007conten"
    "t\030\001 \002(\t", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mid/gen_proto/gen_echo_mid_srv.proto", &protobuf_RegisterTypes);
  mid_echo_request::default_instance_ = new mid_echo_request();
  mid_echo_response::default_instance_ = new mid_echo_response();
  mid_echo_request::default_instance_->InitAsDefaultInstance();
  mid_echo_response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto {
  StaticDescriptorInitializer_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto() {
    protobuf_AddDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto();
  }
} static_descriptor_initializer_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mid_echo_request::kContentFieldNumber;
#endif  // !_MSC_VER

mid_echo_request::mid_echo_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mid_echo_request::InitAsDefaultInstance() {
}

mid_echo_request::mid_echo_request(const mid_echo_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mid_echo_request::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mid_echo_request::~mid_echo_request() {
  SharedDtor();
}

void mid_echo_request::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void mid_echo_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mid_echo_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mid_echo_request_descriptor_;
}

const mid_echo_request& mid_echo_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto();
  return *default_instance_;
}

mid_echo_request* mid_echo_request::default_instance_ = NULL;

mid_echo_request* mid_echo_request::New() const {
  return new mid_echo_request;
}

void mid_echo_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mid_echo_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mid_echo_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mid_echo_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mid_echo_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mid_echo_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mid_echo_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mid_echo_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mid_echo_request::MergeFrom(const mid_echo_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mid_echo_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mid_echo_request::CopyFrom(const mid_echo_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mid_echo_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mid_echo_request::Swap(mid_echo_request* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mid_echo_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mid_echo_request_descriptor_;
  metadata.reflection = mid_echo_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mid_echo_response::kContentFieldNumber;
#endif  // !_MSC_VER

mid_echo_response::mid_echo_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mid_echo_response::InitAsDefaultInstance() {
}

mid_echo_response::mid_echo_response(const mid_echo_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mid_echo_response::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mid_echo_response::~mid_echo_response() {
  SharedDtor();
}

void mid_echo_response::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void mid_echo_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mid_echo_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mid_echo_response_descriptor_;
}

const mid_echo_response& mid_echo_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mid_2fgen_5fproto_2fgen_5fecho_5fmid_5fsrv_2eproto();
  return *default_instance_;
}

mid_echo_response* mid_echo_response::default_instance_ = NULL;

mid_echo_response* mid_echo_response::New() const {
  return new mid_echo_response;
}

void mid_echo_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mid_echo_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mid_echo_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mid_echo_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mid_echo_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mid_echo_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mid_echo_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mid_echo_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mid_echo_response::MergeFrom(const mid_echo_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mid_echo_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mid_echo_response::CopyFrom(const mid_echo_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mid_echo_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mid_echo_response::Swap(mid_echo_response* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mid_echo_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mid_echo_response_descriptor_;
  metadata.reflection = mid_echo_response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mid_echo_srv

// @@protoc_insertion_point(global_scope)
