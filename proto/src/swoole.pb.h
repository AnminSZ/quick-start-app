// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swoole.proto

#ifndef PROTOBUF_swoole_2eproto__INCLUDED
#define PROTOBUF_swoole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace blink {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_swoole_2eproto();
void protobuf_AssignDesc_swoole_2eproto();
void protobuf_ShutdownFile_swoole_2eproto();

class SwooleBodyHeader;
class mc_stat_item;
class collect_request;

// ===================================================================

class SwooleBodyHeader : public ::google::protobuf::Message {
 public:
  SwooleBodyHeader();
  virtual ~SwooleBodyHeader();

  SwooleBodyHeader(const SwooleBodyHeader& from);

  inline SwooleBodyHeader& operator=(const SwooleBodyHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwooleBodyHeader& default_instance();

  void Swap(SwooleBodyHeader* other);

  // implements Message ----------------------------------------------

  SwooleBodyHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SwooleBodyHeader& from);
  void MergeFrom(const SwooleBodyHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string src = 2;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 2;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string buvid = 4;
  inline bool has_buvid() const;
  inline void clear_buvid();
  static const int kBuvidFieldNumber = 4;
  inline const ::std::string& buvid() const;
  inline void set_buvid(const ::std::string& value);
  inline void set_buvid(const char* value);
  inline void set_buvid(const char* value, size_t size);
  inline ::std::string* mutable_buvid();
  inline ::std::string* release_buvid();
  inline void set_allocated_buvid(::std::string* buvid);

  // optional string trace_id = 5;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 5;
  inline const ::std::string& trace_id() const;
  inline void set_trace_id(const ::std::string& value);
  inline void set_trace_id(const char* value);
  inline void set_trace_id(const char* value, size_t size);
  inline ::std::string* mutable_trace_id();
  inline ::std::string* release_trace_id();
  inline void set_allocated_trace_id(::std::string* trace_id);

  // optional uint64 uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string caller = 7;
  inline bool has_caller() const;
  inline void clear_caller();
  static const int kCallerFieldNumber = 7;
  inline const ::std::string& caller() const;
  inline void set_caller(const ::std::string& value);
  inline void set_caller(const char* value);
  inline void set_caller(const char* value, size_t size);
  inline ::std::string* mutable_caller();
  inline ::std::string* release_caller();
  inline void set_allocated_caller(::std::string* caller);

  // optional string user_ip = 8;
  inline bool has_user_ip() const;
  inline void clear_user_ip();
  static const int kUserIpFieldNumber = 8;
  inline const ::std::string& user_ip() const;
  inline void set_user_ip(const ::std::string& value);
  inline void set_user_ip(const char* value);
  inline void set_user_ip(const char* value, size_t size);
  inline ::std::string* mutable_user_ip();
  inline ::std::string* release_user_ip();
  inline void set_allocated_user_ip(::std::string* user_ip);

  // optional int32 flag_test = 9 [default = 0];
  inline bool has_flag_test() const;
  inline void clear_flag_test();
  static const int kFlagTestFieldNumber = 9;
  inline ::google::protobuf::int32 flag_test() const;
  inline void set_flag_test(::google::protobuf::int32 value);

  // optional int32 need_trace = 10 [default = 0];
  inline bool has_need_trace() const;
  inline void clear_need_trace();
  static const int kNeedTraceFieldNumber = 10;
  inline ::google::protobuf::int32 need_trace() const;
  inline void set_need_trace(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:blink.SwooleBodyHeader)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_buvid();
  inline void clear_has_buvid();
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_caller();
  inline void clear_has_caller();
  inline void set_has_user_ip();
  inline void clear_has_user_ip();
  inline void set_has_flag_test();
  inline void clear_has_flag_test();
  inline void set_has_need_trace();
  inline void clear_has_need_trace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* platform_;
  ::std::string* src_;
  ::std::string* version_;
  ::std::string* buvid_;
  ::std::string* trace_id_;
  ::google::protobuf::uint64 uid_;
  ::std::string* caller_;
  ::std::string* user_ip_;
  ::google::protobuf::int32 flag_test_;
  ::google::protobuf::int32 need_trace_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_swoole_2eproto();
  friend void protobuf_AssignDesc_swoole_2eproto();
  friend void protobuf_ShutdownFile_swoole_2eproto();

  void InitAsDefaultInstance();
  static SwooleBodyHeader* default_instance_;
};
// -------------------------------------------------------------------

class mc_stat_item : public ::google::protobuf::Message {
 public:
  mc_stat_item();
  virtual ~mc_stat_item();

  mc_stat_item(const mc_stat_item& from);

  inline mc_stat_item& operator=(const mc_stat_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mc_stat_item& default_instance();

  void Swap(mc_stat_item* other);

  // implements Message ----------------------------------------------

  mc_stat_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mc_stat_item& from);
  void MergeFrom(const mc_stat_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src_service = 1;
  inline bool has_src_service() const;
  inline void clear_src_service();
  static const int kSrcServiceFieldNumber = 1;
  inline const ::std::string& src_service() const;
  inline void set_src_service(const ::std::string& value);
  inline void set_src_service(const char* value);
  inline void set_src_service(const char* value, size_t size);
  inline ::std::string* mutable_src_service();
  inline ::std::string* release_src_service();
  inline void set_allocated_src_service(::std::string* src_service);

  // required string dst_service = 2;
  inline bool has_dst_service() const;
  inline void clear_dst_service();
  static const int kDstServiceFieldNumber = 2;
  inline const ::std::string& dst_service() const;
  inline void set_dst_service(const ::std::string& value);
  inline void set_dst_service(const char* value);
  inline void set_dst_service(const char* value, size_t size);
  inline ::std::string* mutable_dst_service();
  inline ::std::string* release_dst_service();
  inline void set_allocated_dst_service(::std::string* dst_service);

  // required string cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // required string src_ip = 4;
  inline bool has_src_ip() const;
  inline void clear_src_ip();
  static const int kSrcIpFieldNumber = 4;
  inline const ::std::string& src_ip() const;
  inline void set_src_ip(const ::std::string& value);
  inline void set_src_ip(const char* value);
  inline void set_src_ip(const char* value, size_t size);
  inline ::std::string* mutable_src_ip();
  inline ::std::string* release_src_ip();
  inline void set_allocated_src_ip(::std::string* src_ip);

  // required string dst_ip = 5;
  inline bool has_dst_ip() const;
  inline void clear_dst_ip();
  static const int kDstIpFieldNumber = 5;
  inline const ::std::string& dst_ip() const;
  inline void set_dst_ip(const ::std::string& value);
  inline void set_dst_ip(const char* value);
  inline void set_dst_ip(const char* value, size_t size);
  inline ::std::string* mutable_dst_ip();
  inline ::std::string* release_dst_ip();
  inline void set_allocated_dst_ip(::std::string* dst_ip);

  // required string caller = 6;
  inline bool has_caller() const;
  inline void clear_caller();
  static const int kCallerFieldNumber = 6;
  inline const ::std::string& caller() const;
  inline void set_caller(const ::std::string& value);
  inline void set_caller(const char* value);
  inline void set_caller(const char* value, size_t size);
  inline ::std::string* mutable_caller();
  inline ::std::string* release_caller();
  inline void set_allocated_caller(::std::string* caller);

  // required int64 req_time = 7;
  inline bool has_req_time() const;
  inline void clear_req_time();
  static const int kReqTimeFieldNumber = 7;
  inline ::google::protobuf::int64 req_time() const;
  inline void set_req_time(::google::protobuf::int64 value);

  // required int64 resp_time = 8;
  inline bool has_resp_time() const;
  inline void clear_resp_time();
  static const int kRespTimeFieldNumber = 8;
  inline ::google::protobuf::int64 resp_time() const;
  inline void set_resp_time(::google::protobuf::int64 value);

  // required int64 biz_cost = 9;
  inline bool has_biz_cost() const;
  inline void clear_biz_cost();
  static const int kBizCostFieldNumber = 9;
  inline ::google::protobuf::int64 biz_cost() const;
  inline void set_biz_cost(::google::protobuf::int64 value);

  // required int64 socket_code = 10;
  inline bool has_socket_code() const;
  inline void clear_socket_code();
  static const int kSocketCodeFieldNumber = 10;
  inline ::google::protobuf::int64 socket_code() const;
  inline void set_socket_code(::google::protobuf::int64 value);

  // required int64 biz_code = 11;
  inline bool has_biz_code() const;
  inline void clear_biz_code();
  static const int kBizCodeFieldNumber = 11;
  inline ::google::protobuf::int64 biz_code() const;
  inline void set_biz_code(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:blink.mc_stat_item)
 private:
  inline void set_has_src_service();
  inline void clear_has_src_service();
  inline void set_has_dst_service();
  inline void clear_has_dst_service();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_src_ip();
  inline void clear_has_src_ip();
  inline void set_has_dst_ip();
  inline void clear_has_dst_ip();
  inline void set_has_caller();
  inline void clear_has_caller();
  inline void set_has_req_time();
  inline void clear_has_req_time();
  inline void set_has_resp_time();
  inline void clear_has_resp_time();
  inline void set_has_biz_cost();
  inline void clear_has_biz_cost();
  inline void set_has_socket_code();
  inline void clear_has_socket_code();
  inline void set_has_biz_code();
  inline void clear_has_biz_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_service_;
  ::std::string* dst_service_;
  ::std::string* cmd_;
  ::std::string* src_ip_;
  ::std::string* dst_ip_;
  ::std::string* caller_;
  ::google::protobuf::int64 req_time_;
  ::google::protobuf::int64 resp_time_;
  ::google::protobuf::int64 biz_cost_;
  ::google::protobuf::int64 socket_code_;
  ::google::protobuf::int64 biz_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_swoole_2eproto();
  friend void protobuf_AssignDesc_swoole_2eproto();
  friend void protobuf_ShutdownFile_swoole_2eproto();

  void InitAsDefaultInstance();
  static mc_stat_item* default_instance_;
};
// -------------------------------------------------------------------

class collect_request : public ::google::protobuf::Message {
 public:
  collect_request();
  virtual ~collect_request();

  collect_request(const collect_request& from);

  inline collect_request& operator=(const collect_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const collect_request& default_instance();

  void Swap(collect_request* other);

  // implements Message ----------------------------------------------

  collect_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const collect_request& from);
  void MergeFrom(const collect_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .blink.mc_stat_item new_items = 1;
  inline int new_items_size() const;
  inline void clear_new_items();
  static const int kNewItemsFieldNumber = 1;
  inline const ::blink::mc_stat_item& new_items(int index) const;
  inline ::blink::mc_stat_item* mutable_new_items(int index);
  inline ::blink::mc_stat_item* add_new_items();
  inline const ::google::protobuf::RepeatedPtrField< ::blink::mc_stat_item >&
      new_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::blink::mc_stat_item >*
      mutable_new_items();

  // optional uint64 last_report_time = 2;
  inline bool has_last_report_time() const;
  inline void clear_last_report_time();
  static const int kLastReportTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 last_report_time() const;
  inline void set_last_report_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:blink.collect_request)
 private:
  inline void set_has_last_report_time();
  inline void clear_has_last_report_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::blink::mc_stat_item > new_items_;
  ::google::protobuf::uint64 last_report_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_swoole_2eproto();
  friend void protobuf_AssignDesc_swoole_2eproto();
  friend void protobuf_ShutdownFile_swoole_2eproto();

  void InitAsDefaultInstance();
  static collect_request* default_instance_;
};
// ===================================================================


// ===================================================================

// SwooleBodyHeader

// optional string platform = 1;
inline bool SwooleBodyHeader::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwooleBodyHeader::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwooleBodyHeader::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwooleBodyHeader::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& SwooleBodyHeader::platform() const {
  return *platform_;
}
inline void SwooleBodyHeader::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void SwooleBodyHeader::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void SwooleBodyHeader::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* SwooleBodyHeader::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string src = 2;
inline bool SwooleBodyHeader::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwooleBodyHeader::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwooleBodyHeader::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwooleBodyHeader::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& SwooleBodyHeader::src() const {
  return *src_;
}
inline void SwooleBodyHeader::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SwooleBodyHeader::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SwooleBodyHeader::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* SwooleBodyHeader::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 3;
inline bool SwooleBodyHeader::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwooleBodyHeader::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwooleBodyHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwooleBodyHeader::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& SwooleBodyHeader::version() const {
  return *version_;
}
inline void SwooleBodyHeader::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void SwooleBodyHeader::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void SwooleBodyHeader::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* SwooleBodyHeader::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string buvid = 4;
inline bool SwooleBodyHeader::has_buvid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SwooleBodyHeader::set_has_buvid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SwooleBodyHeader::clear_has_buvid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SwooleBodyHeader::clear_buvid() {
  if (buvid_ != &::google::protobuf::internal::kEmptyString) {
    buvid_->clear();
  }
  clear_has_buvid();
}
inline const ::std::string& SwooleBodyHeader::buvid() const {
  return *buvid_;
}
inline void SwooleBodyHeader::set_buvid(const ::std::string& value) {
  set_has_buvid();
  if (buvid_ == &::google::protobuf::internal::kEmptyString) {
    buvid_ = new ::std::string;
  }
  buvid_->assign(value);
}
inline void SwooleBodyHeader::set_buvid(const char* value) {
  set_has_buvid();
  if (buvid_ == &::google::protobuf::internal::kEmptyString) {
    buvid_ = new ::std::string;
  }
  buvid_->assign(value);
}
inline void SwooleBodyHeader::set_buvid(const char* value, size_t size) {
  set_has_buvid();
  if (buvid_ == &::google::protobuf::internal::kEmptyString) {
    buvid_ = new ::std::string;
  }
  buvid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_buvid() {
  set_has_buvid();
  if (buvid_ == &::google::protobuf::internal::kEmptyString) {
    buvid_ = new ::std::string;
  }
  return buvid_;
}
inline ::std::string* SwooleBodyHeader::release_buvid() {
  clear_has_buvid();
  if (buvid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buvid_;
    buvid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_buvid(::std::string* buvid) {
  if (buvid_ != &::google::protobuf::internal::kEmptyString) {
    delete buvid_;
  }
  if (buvid) {
    set_has_buvid();
    buvid_ = buvid;
  } else {
    clear_has_buvid();
    buvid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string trace_id = 5;
inline bool SwooleBodyHeader::has_trace_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SwooleBodyHeader::set_has_trace_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SwooleBodyHeader::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SwooleBodyHeader::clear_trace_id() {
  if (trace_id_ != &::google::protobuf::internal::kEmptyString) {
    trace_id_->clear();
  }
  clear_has_trace_id();
}
inline const ::std::string& SwooleBodyHeader::trace_id() const {
  return *trace_id_;
}
inline void SwooleBodyHeader::set_trace_id(const ::std::string& value) {
  set_has_trace_id();
  if (trace_id_ == &::google::protobuf::internal::kEmptyString) {
    trace_id_ = new ::std::string;
  }
  trace_id_->assign(value);
}
inline void SwooleBodyHeader::set_trace_id(const char* value) {
  set_has_trace_id();
  if (trace_id_ == &::google::protobuf::internal::kEmptyString) {
    trace_id_ = new ::std::string;
  }
  trace_id_->assign(value);
}
inline void SwooleBodyHeader::set_trace_id(const char* value, size_t size) {
  set_has_trace_id();
  if (trace_id_ == &::google::protobuf::internal::kEmptyString) {
    trace_id_ = new ::std::string;
  }
  trace_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_trace_id() {
  set_has_trace_id();
  if (trace_id_ == &::google::protobuf::internal::kEmptyString) {
    trace_id_ = new ::std::string;
  }
  return trace_id_;
}
inline ::std::string* SwooleBodyHeader::release_trace_id() {
  clear_has_trace_id();
  if (trace_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trace_id_;
    trace_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trace_id_;
  }
  if (trace_id) {
    set_has_trace_id();
    trace_id_ = trace_id;
  } else {
    clear_has_trace_id();
    trace_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 uid = 6;
inline bool SwooleBodyHeader::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SwooleBodyHeader::set_has_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SwooleBodyHeader::clear_has_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SwooleBodyHeader::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 SwooleBodyHeader::uid() const {
  return uid_;
}
inline void SwooleBodyHeader::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string caller = 7;
inline bool SwooleBodyHeader::has_caller() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SwooleBodyHeader::set_has_caller() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SwooleBodyHeader::clear_has_caller() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SwooleBodyHeader::clear_caller() {
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    caller_->clear();
  }
  clear_has_caller();
}
inline const ::std::string& SwooleBodyHeader::caller() const {
  return *caller_;
}
inline void SwooleBodyHeader::set_caller(const ::std::string& value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
}
inline void SwooleBodyHeader::set_caller(const char* value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
}
inline void SwooleBodyHeader::set_caller(const char* value, size_t size) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_caller() {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  return caller_;
}
inline ::std::string* SwooleBodyHeader::release_caller() {
  clear_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caller_;
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_caller(::std::string* caller) {
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    delete caller_;
  }
  if (caller) {
    set_has_caller();
    caller_ = caller;
  } else {
    clear_has_caller();
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_ip = 8;
inline bool SwooleBodyHeader::has_user_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SwooleBodyHeader::set_has_user_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SwooleBodyHeader::clear_has_user_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SwooleBodyHeader::clear_user_ip() {
  if (user_ip_ != &::google::protobuf::internal::kEmptyString) {
    user_ip_->clear();
  }
  clear_has_user_ip();
}
inline const ::std::string& SwooleBodyHeader::user_ip() const {
  return *user_ip_;
}
inline void SwooleBodyHeader::set_user_ip(const ::std::string& value) {
  set_has_user_ip();
  if (user_ip_ == &::google::protobuf::internal::kEmptyString) {
    user_ip_ = new ::std::string;
  }
  user_ip_->assign(value);
}
inline void SwooleBodyHeader::set_user_ip(const char* value) {
  set_has_user_ip();
  if (user_ip_ == &::google::protobuf::internal::kEmptyString) {
    user_ip_ = new ::std::string;
  }
  user_ip_->assign(value);
}
inline void SwooleBodyHeader::set_user_ip(const char* value, size_t size) {
  set_has_user_ip();
  if (user_ip_ == &::google::protobuf::internal::kEmptyString) {
    user_ip_ = new ::std::string;
  }
  user_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwooleBodyHeader::mutable_user_ip() {
  set_has_user_ip();
  if (user_ip_ == &::google::protobuf::internal::kEmptyString) {
    user_ip_ = new ::std::string;
  }
  return user_ip_;
}
inline ::std::string* SwooleBodyHeader::release_user_ip() {
  clear_has_user_ip();
  if (user_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_ip_;
    user_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SwooleBodyHeader::set_allocated_user_ip(::std::string* user_ip) {
  if (user_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete user_ip_;
  }
  if (user_ip) {
    set_has_user_ip();
    user_ip_ = user_ip;
  } else {
    clear_has_user_ip();
    user_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag_test = 9 [default = 0];
inline bool SwooleBodyHeader::has_flag_test() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SwooleBodyHeader::set_has_flag_test() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SwooleBodyHeader::clear_has_flag_test() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SwooleBodyHeader::clear_flag_test() {
  flag_test_ = 0;
  clear_has_flag_test();
}
inline ::google::protobuf::int32 SwooleBodyHeader::flag_test() const {
  return flag_test_;
}
inline void SwooleBodyHeader::set_flag_test(::google::protobuf::int32 value) {
  set_has_flag_test();
  flag_test_ = value;
}

// optional int32 need_trace = 10 [default = 0];
inline bool SwooleBodyHeader::has_need_trace() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SwooleBodyHeader::set_has_need_trace() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SwooleBodyHeader::clear_has_need_trace() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SwooleBodyHeader::clear_need_trace() {
  need_trace_ = 0;
  clear_has_need_trace();
}
inline ::google::protobuf::int32 SwooleBodyHeader::need_trace() const {
  return need_trace_;
}
inline void SwooleBodyHeader::set_need_trace(::google::protobuf::int32 value) {
  set_has_need_trace();
  need_trace_ = value;
}

// -------------------------------------------------------------------

// mc_stat_item

// required string src_service = 1;
inline bool mc_stat_item::has_src_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mc_stat_item::set_has_src_service() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mc_stat_item::clear_has_src_service() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mc_stat_item::clear_src_service() {
  if (src_service_ != &::google::protobuf::internal::kEmptyString) {
    src_service_->clear();
  }
  clear_has_src_service();
}
inline const ::std::string& mc_stat_item::src_service() const {
  return *src_service_;
}
inline void mc_stat_item::set_src_service(const ::std::string& value) {
  set_has_src_service();
  if (src_service_ == &::google::protobuf::internal::kEmptyString) {
    src_service_ = new ::std::string;
  }
  src_service_->assign(value);
}
inline void mc_stat_item::set_src_service(const char* value) {
  set_has_src_service();
  if (src_service_ == &::google::protobuf::internal::kEmptyString) {
    src_service_ = new ::std::string;
  }
  src_service_->assign(value);
}
inline void mc_stat_item::set_src_service(const char* value, size_t size) {
  set_has_src_service();
  if (src_service_ == &::google::protobuf::internal::kEmptyString) {
    src_service_ = new ::std::string;
  }
  src_service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mc_stat_item::mutable_src_service() {
  set_has_src_service();
  if (src_service_ == &::google::protobuf::internal::kEmptyString) {
    src_service_ = new ::std::string;
  }
  return src_service_;
}
inline ::std::string* mc_stat_item::release_src_service() {
  clear_has_src_service();
  if (src_service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_service_;
    src_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mc_stat_item::set_allocated_src_service(::std::string* src_service) {
  if (src_service_ != &::google::protobuf::internal::kEmptyString) {
    delete src_service_;
  }
  if (src_service) {
    set_has_src_service();
    src_service_ = src_service;
  } else {
    clear_has_src_service();
    src_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst_service = 2;
inline bool mc_stat_item::has_dst_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mc_stat_item::set_has_dst_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mc_stat_item::clear_has_dst_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mc_stat_item::clear_dst_service() {
  if (dst_service_ != &::google::protobuf::internal::kEmptyString) {
    dst_service_->clear();
  }
  clear_has_dst_service();
}
inline const ::std::string& mc_stat_item::dst_service() const {
  return *dst_service_;
}
inline void mc_stat_item::set_dst_service(const ::std::string& value) {
  set_has_dst_service();
  if (dst_service_ == &::google::protobuf::internal::kEmptyString) {
    dst_service_ = new ::std::string;
  }
  dst_service_->assign(value);
}
inline void mc_stat_item::set_dst_service(const char* value) {
  set_has_dst_service();
  if (dst_service_ == &::google::protobuf::internal::kEmptyString) {
    dst_service_ = new ::std::string;
  }
  dst_service_->assign(value);
}
inline void mc_stat_item::set_dst_service(const char* value, size_t size) {
  set_has_dst_service();
  if (dst_service_ == &::google::protobuf::internal::kEmptyString) {
    dst_service_ = new ::std::string;
  }
  dst_service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mc_stat_item::mutable_dst_service() {
  set_has_dst_service();
  if (dst_service_ == &::google::protobuf::internal::kEmptyString) {
    dst_service_ = new ::std::string;
  }
  return dst_service_;
}
inline ::std::string* mc_stat_item::release_dst_service() {
  clear_has_dst_service();
  if (dst_service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_service_;
    dst_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mc_stat_item::set_allocated_dst_service(::std::string* dst_service) {
  if (dst_service_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_service_;
  }
  if (dst_service) {
    set_has_dst_service();
    dst_service_ = dst_service;
  } else {
    clear_has_dst_service();
    dst_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cmd = 3;
inline bool mc_stat_item::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mc_stat_item::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mc_stat_item::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mc_stat_item::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& mc_stat_item::cmd() const {
  return *cmd_;
}
inline void mc_stat_item::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void mc_stat_item::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void mc_stat_item::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mc_stat_item::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* mc_stat_item::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mc_stat_item::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string src_ip = 4;
inline bool mc_stat_item::has_src_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mc_stat_item::set_has_src_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mc_stat_item::clear_has_src_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mc_stat_item::clear_src_ip() {
  if (src_ip_ != &::google::protobuf::internal::kEmptyString) {
    src_ip_->clear();
  }
  clear_has_src_ip();
}
inline const ::std::string& mc_stat_item::src_ip() const {
  return *src_ip_;
}
inline void mc_stat_item::set_src_ip(const ::std::string& value) {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  src_ip_->assign(value);
}
inline void mc_stat_item::set_src_ip(const char* value) {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  src_ip_->assign(value);
}
inline void mc_stat_item::set_src_ip(const char* value, size_t size) {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  src_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mc_stat_item::mutable_src_ip() {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  return src_ip_;
}
inline ::std::string* mc_stat_item::release_src_ip() {
  clear_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_ip_;
    src_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mc_stat_item::set_allocated_src_ip(::std::string* src_ip) {
  if (src_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete src_ip_;
  }
  if (src_ip) {
    set_has_src_ip();
    src_ip_ = src_ip;
  } else {
    clear_has_src_ip();
    src_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst_ip = 5;
inline bool mc_stat_item::has_dst_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mc_stat_item::set_has_dst_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mc_stat_item::clear_has_dst_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mc_stat_item::clear_dst_ip() {
  if (dst_ip_ != &::google::protobuf::internal::kEmptyString) {
    dst_ip_->clear();
  }
  clear_has_dst_ip();
}
inline const ::std::string& mc_stat_item::dst_ip() const {
  return *dst_ip_;
}
inline void mc_stat_item::set_dst_ip(const ::std::string& value) {
  set_has_dst_ip();
  if (dst_ip_ == &::google::protobuf::internal::kEmptyString) {
    dst_ip_ = new ::std::string;
  }
  dst_ip_->assign(value);
}
inline void mc_stat_item::set_dst_ip(const char* value) {
  set_has_dst_ip();
  if (dst_ip_ == &::google::protobuf::internal::kEmptyString) {
    dst_ip_ = new ::std::string;
  }
  dst_ip_->assign(value);
}
inline void mc_stat_item::set_dst_ip(const char* value, size_t size) {
  set_has_dst_ip();
  if (dst_ip_ == &::google::protobuf::internal::kEmptyString) {
    dst_ip_ = new ::std::string;
  }
  dst_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mc_stat_item::mutable_dst_ip() {
  set_has_dst_ip();
  if (dst_ip_ == &::google::protobuf::internal::kEmptyString) {
    dst_ip_ = new ::std::string;
  }
  return dst_ip_;
}
inline ::std::string* mc_stat_item::release_dst_ip() {
  clear_has_dst_ip();
  if (dst_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_ip_;
    dst_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mc_stat_item::set_allocated_dst_ip(::std::string* dst_ip) {
  if (dst_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_ip_;
  }
  if (dst_ip) {
    set_has_dst_ip();
    dst_ip_ = dst_ip;
  } else {
    clear_has_dst_ip();
    dst_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string caller = 6;
inline bool mc_stat_item::has_caller() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mc_stat_item::set_has_caller() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mc_stat_item::clear_has_caller() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mc_stat_item::clear_caller() {
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    caller_->clear();
  }
  clear_has_caller();
}
inline const ::std::string& mc_stat_item::caller() const {
  return *caller_;
}
inline void mc_stat_item::set_caller(const ::std::string& value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
}
inline void mc_stat_item::set_caller(const char* value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
}
inline void mc_stat_item::set_caller(const char* value, size_t size) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mc_stat_item::mutable_caller() {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  return caller_;
}
inline ::std::string* mc_stat_item::release_caller() {
  clear_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caller_;
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mc_stat_item::set_allocated_caller(::std::string* caller) {
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    delete caller_;
  }
  if (caller) {
    set_has_caller();
    caller_ = caller;
  } else {
    clear_has_caller();
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 req_time = 7;
inline bool mc_stat_item::has_req_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mc_stat_item::set_has_req_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mc_stat_item::clear_has_req_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mc_stat_item::clear_req_time() {
  req_time_ = GOOGLE_LONGLONG(0);
  clear_has_req_time();
}
inline ::google::protobuf::int64 mc_stat_item::req_time() const {
  return req_time_;
}
inline void mc_stat_item::set_req_time(::google::protobuf::int64 value) {
  set_has_req_time();
  req_time_ = value;
}

// required int64 resp_time = 8;
inline bool mc_stat_item::has_resp_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mc_stat_item::set_has_resp_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mc_stat_item::clear_has_resp_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mc_stat_item::clear_resp_time() {
  resp_time_ = GOOGLE_LONGLONG(0);
  clear_has_resp_time();
}
inline ::google::protobuf::int64 mc_stat_item::resp_time() const {
  return resp_time_;
}
inline void mc_stat_item::set_resp_time(::google::protobuf::int64 value) {
  set_has_resp_time();
  resp_time_ = value;
}

// required int64 biz_cost = 9;
inline bool mc_stat_item::has_biz_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mc_stat_item::set_has_biz_cost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mc_stat_item::clear_has_biz_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mc_stat_item::clear_biz_cost() {
  biz_cost_ = GOOGLE_LONGLONG(0);
  clear_has_biz_cost();
}
inline ::google::protobuf::int64 mc_stat_item::biz_cost() const {
  return biz_cost_;
}
inline void mc_stat_item::set_biz_cost(::google::protobuf::int64 value) {
  set_has_biz_cost();
  biz_cost_ = value;
}

// required int64 socket_code = 10;
inline bool mc_stat_item::has_socket_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mc_stat_item::set_has_socket_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mc_stat_item::clear_has_socket_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mc_stat_item::clear_socket_code() {
  socket_code_ = GOOGLE_LONGLONG(0);
  clear_has_socket_code();
}
inline ::google::protobuf::int64 mc_stat_item::socket_code() const {
  return socket_code_;
}
inline void mc_stat_item::set_socket_code(::google::protobuf::int64 value) {
  set_has_socket_code();
  socket_code_ = value;
}

// required int64 biz_code = 11;
inline bool mc_stat_item::has_biz_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mc_stat_item::set_has_biz_code() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mc_stat_item::clear_has_biz_code() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mc_stat_item::clear_biz_code() {
  biz_code_ = GOOGLE_LONGLONG(0);
  clear_has_biz_code();
}
inline ::google::protobuf::int64 mc_stat_item::biz_code() const {
  return biz_code_;
}
inline void mc_stat_item::set_biz_code(::google::protobuf::int64 value) {
  set_has_biz_code();
  biz_code_ = value;
}

// -------------------------------------------------------------------

// collect_request

// repeated .blink.mc_stat_item new_items = 1;
inline int collect_request::new_items_size() const {
  return new_items_.size();
}
inline void collect_request::clear_new_items() {
  new_items_.Clear();
}
inline const ::blink::mc_stat_item& collect_request::new_items(int index) const {
  return new_items_.Get(index);
}
inline ::blink::mc_stat_item* collect_request::mutable_new_items(int index) {
  return new_items_.Mutable(index);
}
inline ::blink::mc_stat_item* collect_request::add_new_items() {
  return new_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::blink::mc_stat_item >&
collect_request::new_items() const {
  return new_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::blink::mc_stat_item >*
collect_request::mutable_new_items() {
  return &new_items_;
}

// optional uint64 last_report_time = 2;
inline bool collect_request::has_last_report_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void collect_request::set_has_last_report_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void collect_request::clear_has_last_report_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void collect_request::clear_last_report_time() {
  last_report_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_report_time();
}
inline ::google::protobuf::uint64 collect_request::last_report_time() const {
  return last_report_time_;
}
inline void collect_request::set_last_report_time(::google::protobuf::uint64 value) {
  set_has_last_report_time();
  last_report_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blink

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_swoole_2eproto__INCLUDED
