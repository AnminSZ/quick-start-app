//option java_package = "com.bilibili.im.protobuf";
//option java_outer_classname = "MainProtoBuf";
//option optimize_for = CODE_SIZE;

package blink;

enum CmdId 
{
    EN_CMD_ID_INVALID = 0; //非法cmd

    //服务端主动发起:0
    EN_CMD_ID_MSG_NOTIFY = 1;
    EN_CMD_ID_KICK_OUT = 2;

    //Conn接入:100
    EN_CMD_ID_SHAKE_HAND = 100;

    //login:100000
    EN_CMD_ID_LOGIN = 100001;
    EN_CMD_ID_LOGOUT = 100002;
    EN_CMD_ID_FRESH = 100003;

    //msg:200000
    EN_CMD_ID_SEND_MSG = 200001;

    //sync_msg_op:500000
    EN_CMD_ID_SYNC_MSG = 500001;
    EN_CMD_ID_SYNC_RELATION = 500002;
    EN_CMD_ID_SYNC_ACK = 500003;
	EN_CMD_ID_SYNC_GET_MSS = 500004;
    EN_CMD_ID_SYNC_UPD_MSS = 500005;

    //heartbeat:600000
    EN_CMD_ID_HEARTBEAT = 600001;

	//friend svr
	EN_CMD_ID_FRIEND_APPLY = 700001;
	EN_CMD_ID_FRIEND_ACK_APPLY = 700002;
	EN_CMD_ID_FRIEND_REMOVE = 700003;
	EN_CMD_ID_FRIENDS_CHECK = 700004;

	//search svr
	EN_CMD_ID_SEARCH = 800001;

    //push dao 
    EN_CMD_ID_SAVE_TOKEN = 900001;
    EN_CMD_ID_PUSH_NIGHT_SETTING = 900002;
    EN_CMD_ID_PUSH_TOTAL_SETTING = 900003;
    EN_CMD_ID_PUSH_SETTING = 900004;
	EN_CMD_ID_SYNC_PUSH_NIGHT_SETTING = 900005;
    EN_CMD_ID_SYNC_PUSH_TOTAL_SETTING = 900006;
    EN_CMD_ID_SYNC_PUSH_SETTING = 900007;
};

enum MsgRetCode 
{
    EN_MSG_RET_GROUP_NOT_EXIST = 1; //群不存在
    EN_MSG_RET_INVALID_PARAM = 2;//非法参数
    EN_MSG_RET_SUCC = 0; //成功
    EN_MSG_RET_PARSE_ERR = -1; //pb解析失败
    EN_MSG_RET_TIMEOUT = -22;//服务超时
	EN_MSG_RET_SYSTEM_ERR = -3;//系统错误
	EN_MSG_RET_SKEY_INVALID = -4;// skey 非法
	EN_MSG_RET_MISS_HAND = -5;//没有握手
	EN_MSG_RET_NOT_LOGIN = -6;//未登录
	EN_MSG_RET_GET_LOCK_FAIL = -7;//获取锁失败
	EN_MSG_RET_CALL_REDIS_FAIL = -8;//调用redis失败
    EN_MSG_ERT_METHOD_LIMIT = -9;//内网限制
	EN_MSG_RET_SYSTEM_BUSY = -99999;//后端系统繁忙
	EN_MSG_RET_DEP_SERVICE_DOWN = -100000; //cmdid指定的服务不存在或服务全部down机

	// LOGIN_SERVICE
	ERR_LOGIN_SERVICE_ACCESSKEY_ILLIGAL = 20001;//登录使用的accesskey 非法
	ERR_LOGIN_SERVICE_GET_SEQNO_FAILED = 20002;//登录时获取seqno失败
	ERR_LOGIN_SERVICE_SET_ROUNTER_FAILED = 20003;//登录时调用router失败
	ERR_LOGIN_SERVICE_DEV_CONFLICT_FAILED = 20004;//登录时设备冲突, 仅适用于自动登录
	
	// MSG_SERVICE
	ERR_MSG_SERVICE_FORBIDDEN_CONTENT = 21001;//发送的消息中包含屏蔽词
	ERR_MSG_SERVICE_PRIVILEGE_DENIED = 21002;//用户不在群里
	ERR_MSG_SERVICE_RECEIVER_EMPTY = 21003;//群里没有接收用户
	ERR_MSG_SERVICE_WRITE_MSG_FAILED = 21004;//存储msg失败
	ERR_MSG_SERVICE_PUBLISHER_KALFKA_FAILED = 21005;//发送消息时调用kafka失败
	ERR_MSG_SERVICE_CALL_GROUP_FAILED = 21006;//调用group服务失败
	ERR_MSG_SERVICE_MSG_TOO_LONG = 21007;//消息体太长（超过500个字）
    ERR_MSG_SERVICE_CALL_FRIEND_FAILED = 21008;
    ERR_MSG_SERVICE_NOT_FRIENDS = 21009;
    ERR_MSG_SERVICE_SEND_MSG_TOO_FREQUENCY = 21013;//发送消息频率太快
    ERR_MSG_SERVICE_SEND_MSG_DISABLED = 21014;
    ERR_MSG_SERVICE_MOBILE_PHONE_NOT_BIND = 21015;
    ERR_MSG_SERVICE_LV_NOT_ENOUGH = 21016;
	ERR_RET_CODE_USER_IS_SILENCE = 21017;//用户被禁言
    ERR_MSG_SERVICE_GET_MSG_DETAIL_FAILED = 21018;//获取消息信息失败
    ERR_MSG_SERVICE_GET_GROUP_DETAIL_FAILED = 21019;//获取群详情失败
    ERR_MSG_SERVICE_RUBBISH_LIMIT = 21020;
    ERR_MSG_SERVICE_SCORE_NO_ENOUGH = 21021;
    ERR_MSG_SERVICE_WRITE_INBOX_FAILED = 21023;
    ERR_MSG_SERVICE_RUBBISH_MONITOR_SPEED = 21024;
    ERR_MSG_SERVICE_RUBBISH_MONITOR_TOTAL = 21025;
    ERR_MSG_SERVICE_RUBBISH_FACK_SEND = 21998 ;
    

    // RELATION_OPLOG_DAO 
    ERR_RET_RELATION_OPLOG_DAO_START = 22000;
    ERR_RET_RELATION_OPLOG_DAO_SET_SEQNO_FAILED = 22001;
    ERR_RET_RELATION_OPLOG_DAO_QUERY_OPLOG_FAILED = 22002;
    ERR_RET_RELATION_OPLOG_DAO_STORAGE_OPLOG_FAILED = 22003;
    ERR_RET_RELATION_OPLOG_DAO_END = 22999;

	//FRIENDSVR
    ERR_RET_FRIEND_SERVICE_START = 23000;
    ERR_RET_FRIEND_SERVICE_CALL_DAO_FAILED = 23001;
    ERR_RET_FRIEND_SERVICE_SELF_MAX_FRIEND_NUM = 23002;
    ERR_RET_FRIEND_SERVICE_TARGET_MAX_FRIEND_NUM = 23003;
    ERR_RET_FRIEND_SERVICE_FRIEND_CHAIN_EXIST = 23004;
    ERR_RET_FRIEND_SERVICE_APPLY_INSERT_FAILED = 23005;
    ERR_RET_FRIEND_SERVICE_GET_FRIEND_INFO_FAILED = 23006;
    ERR_RET_FRIEND_SERVICE_GET_APPLY_INFO_FALIED = 23007;
    ERR_RET_FRIEND_SERVICE_APPLY_EXPIRED = 23008;
    ERR_RET_FRIEND_SERVICE_SELF_PHONE_NOT_BIND = 23009;
    ERR_RET_FRIEND_SERVICE_TARGET_PHONE_NOT_BIND = 23010;
    ERR_RET_FRIEND_SERVICE_ADD_FRIEDNS_FALIED = 23011;
    ERR_RET_FRIEND_SERVICE_CALL_RELATION_LOG_DAO_FAILED = 23012;
    ERR_RET_FRIEND_SERVICE_DEL_FRIEDNS_FALIED = 23013;
	ERR_RET_FRIEND_INVALID_USER = 23014;
    ERR_RET_FRIEND_SERVICE_END = 23999;
	
	//PUSH_DAO
    ERR_PUSH_DAO_START = 24000;
    ERR_PUSH_DAO_SAVE_TOKEN_FAILED = 24001;
    ERR_PUSH_DAO_PUSH_NIGHT_SETTING_FAILED = 24002;
    ERR_PUSH_DAO_PUSH_TOTAL_SETTING_FAILED = 24003;
    ERR_PUSH_DAO_PUSH_SETTING_FAILED = 24004;
    ERR_PUSH_DAO_SYNC_PUSH_NIGHT_SETTING_FAILED = 24008;
    ERR_PUSH_DAO_SYNC_PUSH_TOTAL_SETTING_FAILED = 24009;
    ERR_PUSH_DAO_SYNC_PUSH_SETTING_FAILED = 24010;
    ERR_PUSH_DAO_END = 24999;

	// single_chat
	ERR_SINGLE_CHAT_START = 25000;
	ERR_SINGLE_CHAT_IN_BLACK_LIST = 25001; // 
	ERR_SINGLE_CHAT_NOT_VIP = 25002; // Must be greater than 1
	ERR_SINGLE_CHAT_DEFRIEND = 25003; // 在对方的拉黑名单中
	ERR_SINGLE_CHAT_LIMIT = 25004;//IM黑名单封禁
	ERR_SINGLE_CHAT_DEFIEND_PEER = 25005;//在自己的拉黑名单中
	ERR_SINGLE_CHAT_END = 25999;

    //GROUP_DAO
	ERR_GROUP_DAO_CANOT_AUTO_JOIN_EXITED_GROUP = 50001;//不能自动加入解散的群

	ERR_RET_CODE_USER_S_FORBIDDEN = 700006;// 您已被封禁，无法执行此操作
	ERR_RET_CODE_INVALID_GROUP_ID = 700007;//非法群组号码

	ERR_RET_CODE_GROUP_NOT_EXIST = 700008;// 群组不存在
	ERR_RET_CODE_MASTER_NO_FANS_GROUP = 700010;
	ERR_RET_CODE_GROUP_DISBAND = 700013;//"群组已被解散"
	ERR_RET_CODE_GROUP_NOT_IN_GROUP = 700014;//你已不在此团中QAQ，无法执行此操作
	ERR_RET_CODE_USER_ALREADY_IN_GROUP = 700016;
	ERR_RET_CODE_USER_ALREADY_IN_OTHER_GROUP_OF_ANCHOR = 700017;

	ERR_RET_CODE_NO_FANS_GROUPS_ON_DISABLE_FANS_GROUPS = 700041;
	ERR_RET_CODE_FANS_GROUP_DISABLED_ON_CREATE = 700042;
	ERR_RET_CODE_FANS_GROUP_DISABLED_ON_AUTOJOIN = 700043;
	//LINK_SETTING
	ERR_MSG_RET_SIGN_IN_ERR = 710001;
	ERR_MSG_RET_DND_THRESHOLD = 710002;
};

message MsgHead 
{
    required fixed32 len = 1;
    required fixed32 crc = 2;
};
message SwooleHttp{
    optional SwooleHead header = 1;     
};
message SwooleHead{
    optional string Host = 1;
};
enum SCallType
{
    EN_MSG_TYPE_REQUEST = 1;
    EN_MSG_TYPE_RESPONSE = 2;
};

message TracePoint
{
	optional uint64 timestamp = 1;
	optional string service = 2;
	optional string method = 3;
	optional string content = 4;
	optional int32 milli_cost = 5;
};

message UserContext
{
	required uint64 uid = 1;
	required string cli_ip = 2;
	required string conn_ip = 3;
	required int32  conn_port = 4;
	optional int32 dev_type = 5;
	optional uint64 ss_trace_id = 6[default=0];
	optional int32 dev_crc32 = 7;
	repeated TracePoint trace_points = 8;
	optional string ss_trace_id_s = 9;
	optional int32 flag_test = 10[default = 0];
	optional string platform = 11;
};

message MsgBody 
{
    optional int32 cmd = 1;//客户端请求类型
    optional uint64 cli_req_id = 2;//客户端请求序列号，用于客户端恢复请求上下文
    optional int32 call_type = 3;//服务器之间使用request, response
    optional uint64 session_code = 4;//用于规避fd重用问题，服务器使用
	optional UserContext uctx = 5;//用户上下文，服务端使用
    optional uint64 ss_req_id = 6;//服务器使用, 恢复执行上下文

    optional string service = 7; //服务名
    optional int32 method = 8;//方法tag
	optional int32 err_code = 9;//错误码
    optional bytes payload = 10;//消息负载
    optional string err_msg = 11;//错误消息
	optional int32 need_trace_point = 12[default=0];
	optional int32 cpu_usage = 13;
}

//*****************shake hands**************
message ReqHands
{
	optional uint64 uid = 1;
};

message RspHands
{
    optional string skey = 1;//用于后续消息的对称加密
};

//*****************login_svr*****************
message Location
{
	required uint64 uid = 1;
	required int32 fd = 2;
	required uint64 code = 3;
	optional string ip = 4;
	optional int32 port = 5;
	optional string access_key = 6;//主站鉴权的access_key
};

enum DeviceType
{
    EN_DEV_TYPE_IOS = 1;
    EN_DEV_TYPE_ANDROID = 2;
    EN_DEV_TYPE_H5 = 3;
    EN_DEV_TYPE_PC = 4;
    EN_DEV_TYPE_WEB = 5;
};

//用户登录 
message ReqLogin
{
    required uint64 uid = 1;//用户uid
    required string access_key = 2;//主站鉴权的access_key
    required int32 dev_type = 3;//设备类型
    required string dev_id = 4;//设备标识
    optional Location location = 5; // 接入层信息，由conn服务传入
    optional double longitude = 6;//保留字段，经度
    optional double latitude = 7;//保留字段，纬度
    optional string version = 8;//客户端版本号
    optional string fast_token = 9; // 快速登录
    optional uint32 auto_login = 10[default=0]; // 是否是自动登录，0 - 正常登录，1 - 自动登录
};

//快速登录
message ReqFastLogin
{
    required uint32 uid = 1;
    required string token = 2;//上次登录成功后，服务器返回给客户端的next_token
    required int32 dev_type = 3;
    required string dev_id = 4;
    optional string conn_ip = 5;
    optional int32 port = 6;
    optional double longitude = 7;
    optional double latitude = 8;
    required string access_key = 9;//快速登录校验失败后，服务器会利用该字段进行主站鉴权
};

//登录回复
message RspLogin
{
    optional string next_token = 1;//用于下次快速登录的token
    optional uint64 server_latest_seqno = 2;//服务端的当前最大msg_seqno
    optional uint64 uid = 3; // 用户UID
	optional uint64 latest_mss_ts = 4; // 多端同步，服务端最大的ts, 如果比本地大，则需要客户端拉取数据
};

//用户登出
message ReqLogout
{
	required uint64 uid = 1;//用户ID 
	required int32 dev_type = 2;//设备类型
	required string dev_id = 3;//设备标识
};

message ReqFresh
{
	optional string token = 1;
};

message RspFresh
{
};

//*****************msg_svr*****************

message DummyRsp
{
    repeated int32 __blank = 1;//兼容之前返回为[]的情况
};

enum RecverType
{
    EN_RECVER_TYPE_PEER = 1; //单人
    EN_RECVER_TYPE_GROUP = 2;//群
    EN_RECVER_TYPE_PEERS = 3;//多人
};

enum MsgType
{
    EN_MSG_TYPE_TEXT = 1;
    EN_MSG_TYPE_PIC = 2;
    EN_MSG_TYPE_AUDIO = 3;
    EN_MSG_TYPE_SHARE = 4;
    EN_MSG_TYPE_DRAW_BACK = 5;//撤销消息
    EN_MSG_TYPE_CUSTOM_FACE = 6;//自定义表情
    EN_MSG_TYPE_SHARE_V2 = 7;

    //功能类系统消息
    EN_MSG_TYPE_GROUP_MEMBER_CHANGED = 101;     //群成员变更
    EN_MSG_TYPE_GROUP_STATUS_CHANGED = 102;     //群状态变更
    EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED = 103;    //群动态变更
    EN_MSG_TYPE_GROUP_LIST_CHANGED = 104;       //群列表变更
    EM_MSG_TYPE_FRIEND_LIST_CHANGED = 105;		//好友列表变更
	EN_MSG_TYPE_GROUP_DETAIL_CHANGED  = 106;      // 群详情发生变化
	EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED = 107;  // 群成员角色发生变化
	EN_MSG_TYPE_NOTICE_WATCH_LIST = 108;
	EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED = 109; //消息系统，收到新的reply
	EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED = 110;    
	EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED = 111;
	EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED = 112;

    //系统通知栏消息
    EN_MSG_TYPE_SYS_GROUP_DISSOLVED = 201;        //群解散 
    EN_MSG_TYPE_SYS_GROUP_JOINED = 202;           //入群
    EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED = 203;      //成员主动退群
    EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED = 204;        //房管被撤
    EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED = 205;        //成员被T
    EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF = 206;        //管理T人
    EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY = 207;        //管理上任
    EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED = 208; //自动创建
    EN_MSG_TYPE_SYS_FRIEND_APPLY = 210;		// 好友申请
    EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK = 211;	// 好友申请通过
    EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING = 212;        // 用户加群申请
    EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY = 213;    // 通知管理员,有其他管理员已经同意用户加群

    //聊天窗口通知
    EN_MSG_TYPE_CHAT_MEMBER_JOINED = 301;        //入群
    EN_MSG_TYPE_CHAT_MEMBER_EXITED = 302;        //退群 
    EN_MSG_TYPE_CHAT_GROUP_FREEZED = 303;        //冻结 
    EN_MSG_TYPE_CHAT_GROUP_DISSOLVED = 304;       //解散
    EN_MSG_TYPE_CHAT_GROUP_CREATED = 305;		//开通应援团
    EN_MSG_TYPE_CHAT_POPUP_SESSION = 306;         //弹出会话
};
 
message Msg 
{
    optional uint64 sender_uid = 1;//发送方uid
    optional int32 receiver_type = 2;//接收方类型
    optional uint64 receiver_id = 3;//接收方id
    optional uint64 cli_msg_id = 4;//客户端的序列id,用于服务端去重

    optional int32 msg_type = 5;//消息类型
    optional string content = 6;//消息内容
    optional uint64 msg_seqno = 7;//服务端的序列号x
    optional uint64 timestamp = 8;//消息发送时间（服务端时间）
    repeated uint64 at_uids = 9;//@用户列表
    repeated uint64 recver_ids = 10;//多人消息
    optional uint64 msg_key = 11;//消息唯一标示
    optional uint32 msg_status = 12; //消息状态
};

//发送消息
message ReqSendMsg
{
    required Msg msg = 1; //消息内容
    optional bool instant = 2[default=false];//是否即时消息，即时消息仅发送至在线用户;
    optional string cookie = 3;
    optional string cookie2= 4;
    optional int32  official_msg = 5 ; 
    optional int32  error_code = 6 ;         //批量发送的时候才需要。把返回的code写到req里面传回去
    optional string dev_id = 7; // 用于web_im
};

message RspSendMsg
{
    optional uint64 msg_key = 1;
};

//批量发送消息接口
message ReqBatchSendMsg
{
    repeated ReqSendMsg send_msg_list = 1;
};

message RspBatchSendMsg
{
    repeated ReqSendMsg failed_msg_list = 1;
};


//下行协议，该请求为服务端向客户端发起
message ReqServerNotify
{
	required uint64 lastest_seqno = 1; //最新序列号
    optional Msg instant_msg = 2; //即时消息，该类消息主要用于系统通知。当客户端sync msg时，不会sync到此类消息
};

message RspServerNotify
{
};

//强制下线用户
message ReqServerKickOff 
{
    optional string login_ip = 1; //另一台设备登录ip
    optional int32 dev_type = 2; //另一台设备登录设备类型
    optional string dev_id = 3;    //另一台登录设备
    optional uint64 login_time = 4;//另一台设备登录时间 
};

message RspServerKickOff
{
};

//*****************sync_msg_svr*****************

//消息同步请求
message ReqMsgSync
{
    required uint64 client_seqno = 1; //客户端当前seqno
    optional uint32 msg_count = 2[default=20];      //客户端请求的消息数量
    optional uint64 uid = 3;
	optional bool has_self = 4; // 是否需要拉取自己发出的消息，用于多端同步
    optional string dev_id = 5; // 用于web_im
};

message RspMsgSync
{
    required bool has_more = 1;     //是否有更多消息 
    optional uint64 max_seqno = 2; //本次同步消息中最大的seqno
    repeated Msg messages = 3;   //返回的消息列表
};

//好友同步请求，用于同步客户端好友以及群组列表 
message ReqRelationSync 
{
    required uint64 client_relation_oplog_seqno = 1; //客户端当前seqno
};

enum RelationLogType
{
	EN_INVALID_LOG_TYPE = 0;
    EN_ADD_FRIEND  = 1; //添加好友
    EN_REMOVE_FRIEND = 2; //删除好友
    EN_JOIN_GROUP = 3; //加入群
    EN_EXIT_GROUP = 4; //退出群
};

message FriendRelation
{
    required uint64 uid = 1;
    optional string user_name = 2;
    optional string face = 3; //头像url
    optional uint32 vip_level = 4;  //年费老爷,1年费,2月费
}

message GroupRelation
{
    required uint64 group_id = 1;
    optional uint64 owner_uid = 2;
    optional uint32 group_type = 3; 
    optional uint32 group_level = 4; 
    optional string group_cover = 5; 
    optional string group_name = 6; 
    optional string group_notice = 7; 
    optional int32 status = 8;
    optional int32 member_role = 9;
    optional string fans_medal_name = 10;
    optional uint64 room_id = 11;
}

message RelationLog
{
    required int32 log_type = 1;     //操作类型
    required uint64  oplog_seqno = 2; //操作seqno
    optional FriendRelation friend_relation = 3;  //好友信息
    optional GroupRelation group_relation = 4;  //群信息
};

message RspRelationSync
{
    required int32  full = 1;
    repeated RelationLog relation_logs = 2; //增量日志
    repeated FriendRelation friend_list = 3; //全量列表
    required uint64 server_relation_oplog_seqno = 4;//服务器端最大的relation seqno
    repeated GroupRelation group_list = 5; //全量列表
};

//客户端同步消息完成后，需要向服务器确认同步进度
message ReqSyncAck
{
    required uint64 client_seqno = 1;   //客户端已同步seqno
};

message RspSyncAck
{
};

//*****************heartbeat_svr*****************

message ReqHeartbeat
{
	required uint64 msg_seqno = 1;//消息序列号
	required uint64 op_seqno = 2;//操作序列号
	optional int32 background = 3[default=0];
};

message RspHeartbeat
{
	required uint64 latest_seqno = 1; //服务器最新seqid
    required uint32 heartbeat_timeout = 2; //下次心跳时间，单位秒
};

message ReqSearch
{
	required string what = 1;//搜索内容
	optional int32 flag = 2;
};

message GroupDesc
{
	required uint64 group_id = 1;
	optional string group_name = 2;
	optional string group_cover = 3;
	optional int32 group_type = 4;
	optional string fans_medal_name = 5;
};

message UserDesc
{
	required uint64 uid = 1;
	optional string nickname = 2;
	optional string face = 3;
	
};

message RspSearch
{
	repeated GroupDesc groups = 1;
	repeated UserDesc users = 2;
};

//申请/同意/删除好友
message ReqApplyFriend{
    required uint64 uid = 1; //申请人uid
    required uint64 friend_uid = 2; //对方uid
    optional string verify_text = 3; //验证文本
};

message RspApplyFriend{
    optional uint64 apply_id = 1; //申请ID
};

message ReqAckApplyFriend{
	required uint64 apply_id  = 1; //申请ID
	required uint32 op_code = 2; // 操作 1：同意 2：拒绝
    optional string reply_content = 3; //回复内容
};

message RspAckApplyFriend{

};

message ReqRemoveFriend {
	required uint64 uid = 1;
    required uint64 friend_uid = 2;
};

message RspRemoveFriend{
};

message MonitorDataInner
{
    required string service_type = 1;     //服务类型
    required string  monitor_key = 2;             //监控项id
    required int32 monitor_value = 3;  //监控项value
	optional uint64 timestamp = 4;
};

message ReqAddMonitorLog {
    repeated MonitorDataInner monitor_log = 1;
};


//*****************push_svr*****************

enum ApplicationType
{
    EN_APP_TYPE_BLINK = 1;
    EN_APP_TYPE_BLUE = 2;
    EN_APP_TYPE_PINK = 3;
};

enum BusinessType
{
    EN_BUSINESS_TYPE_IM = 1;
    EN_BUSINESS_TYPE_LIVE = 2;
};

message SyncPushSetting {
    required int32 business_id = 1;	// 参见BusinessType
	required int32 msg_src_type = 2;    // push类型
	required uint64 msg_src_id = 3;     // push源id
};

message ReqSaveToken {
    required int32 app_id = 1;	// 参见ApplicationType
	required int32 dev_type = 2; 	// 参见DeviceType
	required string dev_token = 3;   // token信息
};

message RspSaveToken {

};

message ReqPushNightSetting {
	required int32 app_id = 1;	// 参见ApplicationType
	required int32 push_state = 2;  // push状态,0开,1关
};

message RspPushNightSetting {

};

message ReqPushTotalSetting {
    required int32 business_id = 1;	// 参见BusinessType
	required int32 push_state = 2;  // push状态,0开,1关
};

message RspPushTotalSetting {

};

message ReqPushSetting {
    required int32 business_id = 1;	// 参见BusinessType
	required int32 msg_src_type = 2;    // push类型
	required uint64 msg_src_id = 3;     // push源id
	required int32 push_state = 4;      // push状态,0开,1关
};

message RspPushSetting {

};

message ReqSyncPushNightSet {

};

message RspSyncPushNightSet {
	repeated int32 app_ids = 1;	// 参见ApplicationType
};

message ReqSyncPushTotalSet {

};

message RspSyncPushTotalSet {
	repeated int32 business_ids = 1;
};

message ReqSyncPushSet {

};

message RspSyncPushSet {
	repeated SyncPushSetting push_settings = 1;
};

message ReqUsrSetting {
    optional int32 show_unfollowed_msg = 1;
    optional int32 msg_notify          = 2;
};

// DummyRsp

message ReqGetUsrSetting {
    optional int32 show_unfollowed_msg = 1;
    optional int32 msg_notify          = 2;
};

message RspGetUsrSetting {
    optional int32 show_unfollowed_msg = 1;
    optional int32 msg_notify          = 2;
};

message ReqIsLimit{
    required uint64 uid = 1;
    required int32 type = 2;
};
message RspIsLimit{
    required int32 is_limit = 1;
    optional string limit_msg = 2;
};

message req_kp_silence//禁言
{
    required uint64 uid = 1;
    required uint64 group_id = 2;
    optional uint64 time = 3[default=600];//seconds
};

message req_rm_silence//解除禁言
{
    required uint64 uid = 1;
    required uint64 group_id = 2;
};

//==================消息免打扰================
message ReqSetMsgDndSetting{
	required uint64 uid          = 1 ;
	optional uint64 dnd_uid      = 2 ;
	optional uint64 dnd_group_id = 3 ; 
	required int32  setting      = 4 ; 
};
message Setting
{	required uint64 id      = 1 ;
	required int32  setting = 2 ; 
};
message ReqGetMsgDndSetting{
	required uint64 own_uid   = 1 ;
	repeated uint64 uids      = 2 ;
	repeated uint64 group_ids = 3 ;
};
message RspGetMsgDndSetting{
	repeated Setting uid_settings   = 1 ;
	repeated Setting group_settings = 2 ;
};

message ReqGetMss
{
	optional uint64 ts = 1;
}
message MssItem
{
	optional uint64 peerid = 1;
	optional uint32 type = 2;
	optional uint64 seqno = 3;
	optional uint64 ts = 4;
}
message RspGetMss
{
	repeated MssItem item = 1;
}
message ReqUpdateMss
{
	optional MssItem item = 1;
}
message RspUpdateMss
{
	optional int64 ts = 1;
}
